Usage: PerfectHashBulkCreate.exe <KeysDirectory> <OutputDirectory> <Algorithm>
    <HashFunction> <MaskFunction> <MaximumConcurrency>
    [BulkCreateFlags] [KeysLoadFlags] [TableCreateFlags]
    [TableCompileFlags] [TableCreateParameters]

Bulk Create Flags:

    N/A

Keys Load Flags:

    --TryLargePagesForKeysData

        Tries to allocate the keys buffer using large pages.

    --SkipKeysVerification

        Skips the logic that enumerates all keys after loading and a) ensures
        they are sorted, and b) constructs a keys bitmap.  If you can be certain
        the keys are sorted, specifying this flag can provide a speedup when
        loading large key sets.

Table Create Flags:

    --FirstGraphWins | --FindBestGraph

        --FirstGraphWins [default]

            This is the default behavior.  When searching for solutions in
            parallel, the first graph to be found, "wins".  i.e. it's the
            solution that is subsequently written to disk.

        --FindBestGraph

            Requires the following two table create parameters to be present:

                --BestCoverageNumAttempts=N
                --BestCoverageType=<CoverageType>

            The table create routine will then run until it finds the number of
            best coverage attempts specified.  At that point, the graph that was
            found to be the "best" based on the coverage type predicate "wins",
            and is subsequently saved to disk.

            N.B. This option is significantly more CPU intensive than the
                 --FirstGraphWins mode, however, it is highly probable that it
                 will find a graph that is better (based on the predicate) than
                 when in first graph wins mode.

    --SkipGraphVerification

        When set, skips the internal graph verification check that ensures a
        valid perfect hash solution has been found (i.e. with no collisions
        across the entire key set).

Table Compile Flags:

    N/A

Table Create Parameters:

    --AttemptsBeforeTableResize=N [default = 18]

        Specifies the number of attempts at solving the graph that will be made
        before a table resize event will occur (assuming that resize events are
        permitted, as per the following flag).

    --MaxNumberOfTableResizes=N [default = 5]

        Maximum number of table resizes that will be permitted before giving up.

    --BestCoverageNumAttempts=N

        Where N is a positive integer, and represents the number of
        attempts that will be made at finding a "best" graph (based
        on the best coverage type requested below) before the create
        table routine returns.

    --BestCoverageType=<CoverageType>

        Indicates the predicate to determine what constitutes the best
        graph.

        Valid coverage types:

            HighestNumberOfEmptyCacheLines
