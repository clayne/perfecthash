//
// Auto-generated.
//

DECLSPEC_ALIGN(16)
const CHAR CompiledPerfectHashCHeaderRawCStr[] =
    "/*++\n"
    "\n"
    "Copyright (c) 2018 Trent Nelson <trent@trent.me>\n"
    "\n"
    "Module Name:\n"
    "\n"
    "    CompiledPerfectHash.h\n"
    "\n"
    "Abstract:\n"
    "\n"
    "    This is the main public header file for the compiled perfect hash library.\n"
    "    It defines structures and functions related to loading and using compiled\n"
    "    perfect hash tables.\n"
    "\n"
    "--*/\n"
    "\n"
    "#pragma once\n"
    "\n"
    "#ifdef __cplusplus\n"
    "extern \"C\" {\n"
    "#endif\n"
    "\n"
    "#include <sal.h>\n"
    "\n"
    "#ifndef COMPILED_PERFECT_HASH_DLL_BUILD\n"
    "#define CPHAPI __declspec(dllimport)\n"
    "#else\n"
    "#define CPHAPI __declspec(dllexport)\n"
    "#endif\n"
    "\n"
    "//\n"
    "// Define start/end markers for IACA.\n"
    "//\n"
    "\n"
    "#define IACA_VC_START() __writegsbyte(111, 111)\n"
    "#define IACA_VC_END()   __writegsbyte(222, 222)\n"
    "\n"
    "//\n"
    "// Define basic NT types and macros used by this header file.\n"
    "//\n"
    "\n"
    "#define CPHCALLTYPE __stdcall\n"
    "#define FORCEINLINE __forceinline\n"
    "\n"
    "typedef char BOOLEAN;\n"
    "typedef long LONG;\n"
    "typedef long long LONGLONG;\n"
    "typedef unsigned long ULONG;\n"
    "typedef unsigned long *PULONG;\n"
    "typedef unsigned long long ULONGLONG;\n"
    "typedef void *PVOID;\n"
    "\n"
    "//\n"
    "// Disable the anonymous union/struct warning.\n"
    "//\n"
    "\n"
    "#pragma warning(push)\n"
    "#pragma warning(disable: 4201 4094)\n"
    "\n"
    "typedef union _LARGE_INTEGER {\n"
    "    struct {\n"
    "        ULONG LowPart;\n"
    "        LONG HighPart;\n"
    "    };\n"
    "    LONGLONG QuadPart;\n"
    "} LARGE_INTEGER;\n"
    "typedef LARGE_INTEGER *PLARGE_INTEGER;\n"
    "\n"
    "typedef union _ULARGE_INTEGER {\n"
    "    struct {\n"
    "        ULONG LowPart;\n"
    "        ULONG HighPart;\n"
    "    };\n"
    "    ULONGLONG QuadPart;\n"
    "} ULARGE_INTEGER;\n"
    "typedef ULARGE_INTEGER *PULARGE_INTEGER;\n"
    "\n"
    "//\n"
    "// Define the main functions exposed by a compiled perfect hash table: index,\n"
    "// lookup, insert and delete.\n"
    "//\n"
    "\n"
    "typedef\n"
    "CPHAPI\n"
    "ULONG\n"
    "(CPHCALLTYPE COMPILED_PERFECT_HASH_TABLE_INDEX)(\n"
    "    _In_ ULONG Key\n"
    "    );\n"
    "/*++\n"
    "\n"
    "Routine Description:\n"
    "\n"
    "    Looks up given key in a compiled perfect hash table and returns its index.\n"
    "\n"
    "    N.B. If the given key did not appear in the original set the hash table was\n"
    "         created from, the behavior of this routine is undefined.  (In practice, the\n"
    "         key will hash to either an existing key's location or an empty slot,\n"
    "         so there is potential for returning a non-unique index.)\n"
    "\n"
    "Arguments:\n"
    "\n"
    "    Key - Supplies the key to look up.\n"
    "\n"
    "Return Value:\n"
    "\n"
    "    The index associated with the given key.\n"
    "\n"
    "--*/\n"
    "typedef COMPILED_PERFECT_HASH_TABLE_INDEX *PCOMPILED_PERFECT_HASH_TABLE_INDEX;\n"
    "\n"
    "\n"
    "typedef\n"
    "CPHAPI\n"
    "ULONG\n"
    "(CPHCALLTYPE COMPILED_PERFECT_HASH_TABLE_LOOKUP)(\n"
    "    _In_ ULONG Key\n"
    "    );\n"
    "/*++\n"
    "\n"
    "Routine Description:\n"
    "\n"
    "    Looks up given key in a compiled perfect hash table and returns the value\n"
    "    present.  If no insertion has taken place for this key, this routine\n"
    "    guarantees to return 0 as the value.\n"
    "\n"
    "    N.B. If the given key did not appear in the original set the hash table was\n"
    "         created from, the behavior of this routine is undefined.  (In practice, the\n"
    "         value returned will be the value for some other key in the table that\n"
    "         hashes to the same location -- or potentially an empty slot in the\n"
    "         table.)\n"
    "\n"
    "Arguments:\n"
    "\n"
    "    Key - Supplies the key to look up.\n"
    "\n"
    "Return Value:\n"
    "\n"
    "    The value at the given location.\n"
    "\n"
    "--*/\n"
    "typedef COMPILED_PERFECT_HASH_TABLE_LOOKUP *PCOMPILED_PERFECT_HASH_TABLE_LOOKUP;\n"
    "\n"
    "\n"
    "typedef\n"
    "CPHAPI\n"
    "ULONG\n"
    "(CPHCALLTYPE COMPILED_PERFECT_HASH_TABLE_INSERT)(\n"
    "    _In_ ULONG Key,\n"
    "    _In_ ULONG Value\n"
    "    );\n"
    "/*++\n"
    "\n"
    "Routine Description:\n"
    "\n"
    "    Inserts value at key into a compiled hash table, and returns the previously\n"
    "    set value (which will be 0 if no prior insert occurred).\n"
    "\n"
    "    N.B. If the given key did not appear in the original set the hash table was\n"
    "         created from, the behavior of this routine is undefined.  (In practice, the\n"
    "         key will hash to either an existing key's location or an empty slot, so\n"
    "         there is potential to corrupt the table in the sense that previously\n"
    "         inserted values will be trampled over.)\n"
    "\n"
    "Arguments:\n"
    "\n"
    "    Key - Supplies the key for which the value will be inserted.\n"
    "\n"
    "    Value - Supplies the value to insert.\n"
    "\n"
    "Return Value:\n"
    "\n"
    "    Previous value at the relevant table location prior to this insertion.\n"
    "\n"
    "--*/\n"
    "typedef COMPILED_PERFECT_HASH_TABLE_INSERT *PCOMPILED_PERFECT_HASH_TABLE_INSERT;\n"
    "\n"
    "\n"
    "typedef\n"
    "CPHAPI\n"
    "ULONG\n"
    "(CPHCALLTYPE COMPILED_PERFECT_HASH_TABLE_DELETE)(\n"
    "    _In_ ULONG Key\n"
    "    );\n"
    "/*++\n"
    "\n"
    "Routine Description:\n"
    "\n"
    "    Deletes a key from a perfect hash table, optionally returning the value\n"
    "    prior to deletion back to the caller.  Deletion simply clears the value\n"
    "    associated with the key, and thus, is a simple O(1) operation.  Deleting\n"
    "    a key that has not yet been inserted has no effect other than potentially\n"
    "    returning 0 as the previous value.  That is, a caller can safely issue\n"
    "    deletes of keys regardless of whether or not said keys were inserted first.\n"
    "\n"
    "    N.B. If the given key did not appear in the original set the hash table\n"
    "         was created from, the behavior of this routine is undefined.  (In\n"
    "         practice, the key will hash to either an existing key's location or\n"
    "         an empty slot, so there is potential to corrupt the table in the\n"
    "         sense that a previously inserted value for an unrelated, valid key\n"
    "         will be cleared.)\n"
    "\n"
    "Arguments:\n"
    "\n"
    "    Key - Supplies the key to delete.\n"
    "\n"
    "Return Value:\n"
    "\n"
    "    Previous value at the given key's location prior to deletion.  If no prior\n"
    "    insertion, the previous value is guaranteed to be 0.\n"
    "\n"
    "--*/\n"
    "typedef COMPILED_PERFECT_HASH_TABLE_DELETE\n"
    "      *PCOMPILED_PERFECT_HASH_TABLE_DELETE;\n"
    "\n"
    "//\n"
    "// Define the vtbl structure encapsulating the compiled perfect hash table's\n"
    "// function pointers.\n"
    "//\n"
    "\n"
    "typedef struct _COMPILED_PERFECT_HASH_TABLE_VTBL {\n"
    "    PCOMPILED_PERFECT_HASH_TABLE_INDEX  Index;\n"
    "    PCOMPILED_PERFECT_HASH_TABLE_LOOKUP Lookup;\n"
    "    PCOMPILED_PERFECT_HASH_TABLE_INSERT Insert;\n"
    "    PCOMPILED_PERFECT_HASH_TABLE_DELETE Delete;\n"
    "} COMPILED_PERFECT_HASH_TABLE_VTBL;\n"
    "typedef COMPILED_PERFECT_HASH_TABLE_VTBL *PCOMPILED_PERFECT_HASH_TABLE_VTBL;\n"
    "\n"
    "typedef struct _Struct_size_bytes_(SizeOfStruct) _COMPILED_PERFECT_HASH_TABLE {\n"
    "\n"
    "    COMPILED_PERFECT_HASH_TABLE_VTBL Vtbl;\n"
    "\n"
    "    //\n"
    "    // Size of the structure, in bytes.\n"
    "    //\n"
    "\n"
    "    _Field_range_(==, sizeof(struct _COMPILED_PERFECT_HASH_TABLE))\n"
    "        ULONG SizeOfStruct;\n"
    "\n"
    "    //\n"
    "    // Size of an individual key element, in bytes.\n"
    "    //\n"
    "\n"
    "    ULONG KeySizeInBytes;\n"
    "\n"
    "    //\n"
    "    // Algorithm that was used.\n"
    "    //\n"
    "\n"
    "    ULONG AlgorithmId;\n"
    "\n"
    "    //\n"
    "    // Hash function that was used.\n"
    "    //\n"
    "\n"
    "    ULONG HashFunctionId;\n"
    "\n"
    "    //\n"
    "    // Masking type.\n"
    "    //\n"
    "\n"
    "    ULONG MaskFunctionId;\n"
    "\n"
    "    //\n"
    "    // Padding.\n"
    "    //\n"
    "\n"
    "    ULONG Padding;\n"
    "\n"
    "    //\n"
    "    // Number of keys in the input set.  This is used to size an appropriate\n"
    "    // array for storing values.\n"
    "    //\n"
    "\n"
    "    ULARGE_INTEGER NumberOfKeys;\n"
    "\n"
    "    //\n"
    "    // Final number of elements in the underlying table.  This will vary\n"
    "    // depending on how the graph was created.  If modulus masking is in use,\n"
    "    // this will reflect the number of keys (unless a custom table size was\n"
    "    // requested during creation).  Otherwise, this will be the number of keys\n"
    "    // rounded up to the next power of 2.  (That is, take the number of keys,\n"
    "    // round up to a power of 2, then round that up to the next power of 2.)\n"
    "    //\n"
    "\n"
    "    ULARGE_INTEGER NumberOfTableElements;\n"
    "\n"
    "    //\n"
    "    // Hash and index sizes and masks.\n"
    "    //\n"
    "\n"
    "    ULONG HashSize;\n"
    "    ULONG IndexSize;\n"
    "\n"
    "    ULONG HashMask;\n"
    "    ULONG IndexMask;\n"
    "\n"
    "    //\n"
    "    // Base addresses of the table data and values array.\n"
    "    //\n"
    "\n"
    "    union {\n"
    "        PVOID DataBaseAddress;\n"
    "        PULONG Data;\n"
    "    };\n"
    "\n"
    "    union {\n"
    "        PVOID ValuesBaseAddress;\n"
    "        PULONG Values;\n"
    "    };\n"
    "\n"
    "    //\n"
    "    // Seed data.\n"
    "    //\n"
    "\n"
    "    ULONG NumberOfSeeds;\n"
    "\n"
    "    union {\n"
    "        ULONG Seed1;\n"
    "        ULONG FirstSeed;\n"
    "    };\n"
    "\n"
    "    ULONG Seed2;\n"
    "    ULONG Seed3;\n"
    "\n"
    "    union {\n"
    "        ULONG Seed4;\n"
    "        ULONG LastSeed;\n"
    "    };\n"
    "\n"
    "    ULONG Padding2;\n"
    "\n"
    "} COMPILED_PERFECT_HASH_TABLE;\n"
    "typedef COMPILED_PERFECT_HASH_TABLE *PCOMPILED_PERFECT_HASH_TABLE;\n"
    "\n"
    "typedef\n"
    "_Success_(return != 0)\n"
    "BOOLEAN\n"
    "(CPHCALLTYPE GET_COMPILED_PERFECT_HASH_TABLE)(\n"
    "    _In_ _Field_range_(==, sizeof(Table)) ULONG SizeOfTable,\n"
    "    _Out_writes_bytes_(SizeOfTable) PCOMPILED_PERFECT_HASH_TABLE Table\n"
    "    );\n"
    "/*++\n"
    "\n"
    "Routine Description:\n"
    "\n"
    "    Obtains a compiled perfect hash table structure for a given module.\n"
    "\n"
    "Arguments:\n"
    "\n"
    "    SizeOfTable - Supplies the size, in bytes, of the Table structure.\n"
    "\n"
    "    Table - Supplies a pointer to a COMPILED_PERFECT_HASH_TABLE structure for\n"
    "        which the table instance will be copied.\n"
    "\n"
    "Return Value:\n"
    "\n"
    "    TRUE on success, FALSE on failure.  The only possible way for this routine\n"
    "    to fail is if SizeOfTable isn't correct.\n"
    "\n"
    "--*/\n"
    "typedef GET_COMPILED_PERFECT_HASH_TABLE *PGET_COMPILED_PERFECT_HASH_TABLE;\n"
    "\n"
    "//\n"
    "// Define helper macro for defining functions.\n"
    "//\n"
    "\n"
    "#define DEFINE_COMPILED_PERFECT_HASH_ROUTINES(TableName) \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_INDEX                 \\\n"
    "    CompiledPerfectHash_##TableName##_Index;             \\\n"
    "                                                         \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_LOOKUP                \\\n"
    "    CompiledPerfectHash_##TableName##_Lookup;            \\\n"
    "                                                         \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_INSERT                \\\n"
    "    CompiledPerfectHash_##TableName##_Insert;            \\\n"
    "                                                         \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_DELETE                \\\n"
    "    CompiledPerfectHash_##TableName##_Delete\n"
    "\n"
    "//\n"
    "// Define a helper macro for implementing the Lookup, Insert and Delete routines\n"
    "// once an Index routine has been implemented.\n"
    "//\n"
    "\n"
    "#define DECLARE_COMPILED_PERFECT_HASH_ROUTINES(TableName) \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_LOOKUP                 \\\n"
    "    CompiledPerfectHash_##TableName##_Lookup;             \\\n"
    "                                                          \\\n"
    "_Use_decl_annotations_                                    \\\n"
    "ULONG                                                     \\\n"
    "CompiledPerfectHash_##TableName##_Lookup(                 \\\n"
    "    ULONG Key                                             \\\n"
    "    )                                                     \\\n"
    "{                                                         \\\n"
    "    ULONG Index;                                          \\\n"
    "                                                          \\\n"
    "    Index = CompiledPerfectHash_##TableName##_Index(Key); \\\n"
    "    return TableName##_TableValues[Index];                \\\n"
    "}                                                         \\\n"
    "                                                          \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_INSERT                 \\\n"
    "    CompiledPerfectHash_##TableName##_Insert;             \\\n"
    "                                                          \\\n"
    "_Use_decl_annotations_                                    \\\n"
    "ULONG                                                     \\\n"
    "CompiledPerfectHash_##TableName##_Insert(                 \\\n"
    "    ULONG Key,                                            \\\n"
    "    ULONG Value                                           \\\n"
    "    )                                                     \\\n"
    "{                                                         \\\n"
    "    ULONG Index;                                          \\\n"
    "    ULONG Previous;                                       \\\n"
    "                                                          \\\n"
    "    Index = CompiledPerfectHash_##TableName##_Index(Key); \\\n"
    "    Previous = TableName##_TableValues[Index];            \\\n"
    "    TableName##_TableValues[Index] = Value;               \\\n"
    "    return Previous;                                      \\\n"
    "}                                                         \\\n"
    "                                                          \\\n"
    "CPHAPI COMPILED_PERFECT_HASH_TABLE_DELETE                 \\\n"
    "    CompiledPerfectHash_##TableName##_Delete;             \\\n"
    "                                                          \\\n"
    "_Use_decl_annotations_                                    \\\n"
    "ULONG                                                     \\\n"
    "CompiledPerfectHash_##TableName##_Delete(                 \\\n"
    "    ULONG Key                                             \\\n"
    "    )                                                     \\\n"
    "{                                                         \\\n"
    "    ULONG Index;                                          \\\n"
    "    ULONG Previous;                                       \\\n"
    "                                                          \\\n"
    "    Index = CompiledPerfectHash_##TableName##_Index(Key); \\\n"
    "    Previous = TableName##_TableValues[Index];            \\\n"
    "    TableName##_TableValues[Index] = 0;                   \\\n"
    "    return Previous;                                      \\\n"
    "}\n"
    "\n"
    "//\n"
    "// Inline versions of above.\n"
    "//\n"
    "\n"
    "#define DECLARE_COMPILED_PERFECT_HASH_ROUTINES_INLINE(TableName) \\\n"
    "FORCEINLINE                                                      \\\n"
    "ULONG                                                            \\\n"
    "CompiledPerfectHash_##TableName##_LookupInline(                  \\\n"
    "    _In_ ULONG Key                                               \\\n"
    "    )                                                            \\\n"
    "{                                                                \\\n"
    "    ULONG Index;                                                 \\\n"
    "                                                                 \\\n"
    "    Index = CompiledPerfectHash_##TableName##_IndexInline(Key);  \\\n"
    "    return TableName##_TableValues[Index];                       \\\n"
    "}                                                                \\\n"
    "                                                                 \\\n"
    "FORCEINLINE                                                      \\\n"
    "ULONG                                                            \\\n"
    "CompiledPerfectHash_##TableName##_InsertInline(                  \\\n"
    "    ULONG Key,                                                   \\\n"
    "    ULONG Value                                                  \\\n"
    "    )                                                            \\\n"
    "{                                                                \\\n"
    "    ULONG Index;                                                 \\\n"
    "    ULONG Previous;                                              \\\n"
    "                                                                 \\\n"
    "    Index = CompiledPerfectHash_##TableName##_IndexInline(Key);  \\\n"
    "    Previous = TableName##_TableValues[Index];                   \\\n"
    "    TableName##_TableValues[Index] = Value;                      \\\n"
    "    return Previous;                                             \\\n"
    "}                                                                \\\n"
    "                                                                 \\\n"
    "FORCEINLINE                                                      \\\n"
    "ULONG                                                            \\\n"
    "CompiledPerfectHash_##TableName##_DeleteInline(                  \\\n"
    "    ULONG Key                                                    \\\n"
    "    )                                                            \\\n"
    "{                                                                \\\n"
    "    ULONG Index;                                                 \\\n"
    "    ULONG Previous;                                              \\\n"
    "                                                                 \\\n"
    "    Index = CompiledPerfectHash_##TableName##_IndexInline(Key);  \\\n"
    "    Previous = TableName##_TableValues[Index];                   \\\n"
    "    TableName##_TableValues[Index] = 0;                          \\\n"
    "    return Previous;                                             \\\n"
    "}\n"
    "\n"
    "//\n"
    "// Helper macros for declaring C hash functions.\n"
    "//\n"
    "\n"
    "#define DECLARE_CHM01_CRC32ROTATE_AND_INDEX_ROUTINE(    \\\n"
    "    TableName, Seed1, Seed2, HashMask, IndexMask        \\\n"
    "    )                                                   \\\n"
    "CPHAPI                                                  \\\n"
    "ULONG                                                   \\\n"
    "CompiledPerfectHash_##TableName##_Index(                \\\n"
    "    ULONG Key                                           \\\n"
    "    )                                                   \\\n"
    "{                                                       \\\n"
    "    ULONG Index;                                        \\\n"
    "    ULONG Vertex1;                                      \\\n"
    "    ULONG Vertex2;                                      \\\n"
    "    ULONG MaskedLow;                                    \\\n"
    "    ULONG MaskedHigh;                                   \\\n"
    "    ULONGLONG Combined;                                 \\\n"
    "                                                        \\\n"
    "    Vertex1 = _mm_crc32_u32(Seed1, Key);                \\\n"
    "    Vertex2 = _mm_crc32_u32(Seed2, _rotl(Key, 15));     \\\n"
    "                                                        \\\n"
    "    MaskedLow = Vertex1 & HashMask;                     \\\n"
    "    MaskedHigh = Vertex2 & HashMask;                    \\\n"
    "                                                        \\\n"
    "    Vertex1 = TableName##_TableData[MaskedLow];         \\\n"
    "    Vertex2 = TableName##_TableData[MaskedHigh];        \\\n"
    "                                                        \\\n"
    "    Combined = (ULONGLONG)Vertex1 + (ULONGLONG)Vertex2; \\\n"
    "                                                        \\\n"
    "    Index = Combined & IndexMask;                       \\\n"
    "                                                        \\\n"
    "    return Index;                                       \\\n"
    "}\n"
    "\n"
    "#define DECLARE_CHM01_CRC32ROTATE_AND_INDEX_ROUTINE_INLINE( \\\n"
    "    TableName, Seed1, Seed2, HashMask, IndexMask            \\\n"
    "    )                                                       \\\n"
    "FORCEINLINE                                                 \\\n"
    "ULONG                                                       \\\n"
    "CompiledPerfectHash_##TableName##_IndexInline(              \\\n"
    "    ULONG Key                                               \\\n"
    "    )                                                       \\\n"
    "{                                                           \\\n"
    "    ULONG Index;                                            \\\n"
    "    ULONG Vertex1;                                          \\\n"
    "    ULONG Vertex2;                                          \\\n"
    "    ULONG MaskedLow;                                        \\\n"
    "    ULONG MaskedHigh;                                       \\\n"
    "    ULONGLONG Combined;                                     \\\n"
    "                                                            \\\n"
    "    Vertex1 = _mm_crc32_u32(Seed1, Key);                    \\\n"
    "    Vertex2 = _mm_crc32_u32(Seed2, _rotl(Key, 15));         \\\n"
    "                                                            \\\n"
    "    MaskedLow = Vertex1 & HashMask;                         \\\n"
    "    MaskedHigh = Vertex2 & HashMask;                        \\\n"
    "                                                            \\\n"
    "    Vertex1 = TableName##_TableData[MaskedLow];             \\\n"
    "    Vertex2 = TableName##_TableData[MaskedHigh];            \\\n"
    "                                                            \\\n"
    "    Combined = (ULONGLONG)Vertex1 + (ULONGLONG)Vertex2;     \\\n"
    "                                                            \\\n"
    "    Index = Combined & IndexMask;                           \\\n"
    "                                                            \\\n"
    "    return Index;                                           \\\n"
    "}\n"
    "\n"
    "//\n"
    "// Typedefs of methods for testing and benchmarking.\n"
    "//\n"
    "\n"
    "typedef\n"
    "_Success_(return == 0)\n"
    "ULONG\n"
    "(CPHCALLTYPE TEST_COMPILED_PERFECT_HASH_TABLE)(\n"
    "    _In_opt_ BOOLEAN DebugBreakOnFailure\n"
    "    );\n"
    "typedef TEST_COMPILED_PERFECT_HASH_TABLE\n"
    "      *PTEST_COMPILED_PERFECT_HASH_TABLE;\n"
    "\n"
    "typedef\n"
    "ULONG\n"
    "(CPHCALLTYPE BENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE)(\n"
    "    _In_ ULONG Seconds\n"
    "    );\n"
    "typedef BENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE\n"
    "      *PBENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE;\n"
    "\n"
    "typedef\n"
    "ULONG\n"
    "(CPHCALLTYPE BENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE)(\n"
    "    _In_ ULONG Seconds\n"
    "    );\n"
    "typedef BENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE\n"
    "      *PBENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE;\n"
    "\n"
    "#define DEFINE_TEST_AND_BENCHMARK_COMPILED_PERFECT_HASH_TABLE_ROUTINES(Tbl) \\\n"
    "extern TEST_COMPILED_PERFECT_HASH_TABLE                                     \\\n"
    "    TestCompiledPerfectHashTable_##Tbl;                                     \\\n"
    "                                                                            \\\n"
    "extern BENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE                          \\\n"
    "    BenchmarkIndexCompiledPerfectHashTable_##Tbl;                           \\\n"
    "                                                                            \\\n"
    "extern BENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE                           \\\n"
    "    BenchmarkFullCompiledPerfectHashTable_##Tbl\n"
    "\n"
    "//\n"
    "// The following macros are intended to be used by the Test.c, BenchmarkFull.c\n"
    "// and BenchmarkIndex.c files such that they can generate the proper function\n"
    "// header (with a bit of macro glue) without having to have the table name\n"
    "// hardcoded.\n"
    "//\n"
    "\n"
    "#define DECLARE_TEST_COMPILED_PERFECT_HASH_TABLE_ROUTINE_HEADER(T) \\\n"
    "TEST_COMPILED_PERFECT_HASH_TABLE                                   \\\n"
    "    TestCompiledPerfectHashTable_##T;                              \\\n"
    "                                                                   \\\n"
    "_Use_decl_annotations_                                             \\\n"
    "ULONG                                                              \\\n"
    "TestCompiledPerfectHashTable_##T##(                                \\\n"
    "    BOOLEAN DebugBreakOnFailure                                    \\\n"
    "    )\n"
    "\n"
    "#define DECLARE_BENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE_ROUTINE_HEADER(T) \\\n"
    "BENCHMARK_FULL_COMPILED_PERFECT_HASH_TABLE                                   \\\n"
    "    BenchmarkFullCompiledPerfectHashTable_##T;                               \\\n"
    "                                                                             \\\n"
    "_Use_decl_annotations_                                                       \\\n"
    "ULONG                                                                        \\\n"
    "BenchmarkFullCompiledPerfectHashTable_##T##(                                 \\\n"
    "    ULONG Seconds                                                            \\\n"
    "    )\n"
    "\n"
    "#define DECLARE_BENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE_ROUTINE_HEADER(T) \\\n"
    "BENCHMARK_INDEX_COMPILED_PERFECT_HASH_TABLE                                   \\\n"
    "    BenchmarkIndexCompiledPerfectHashTable_##T;                               \\\n"
    "                                                                              \\\n"
    "_Use_decl_annotations_                                                        \\\n"
    "ULONG                                                                         \\\n"
    "BenchmarkIndexCompiledPerfectHashTable_##T##(                                 \\\n"
    "    ULONG Seconds                                                             \\\n"
    "    )\n"
    "\n"
    "#pragma warning(pop)\n"
    "\n"
    "#ifdef __cplusplus\n"
    "} // extern \"C\"\n"
    "#endif\n"
    "\n"
    "// vim:set ts=8 sw=4 sts=4 tw=80 expandtab                                     :\n"
;

const STRING CompiledPerfectHashCHeaderRawCString = {
    sizeof(CompiledPerfectHashCHeaderRawCStr) - sizeof(CHAR),
    sizeof(CompiledPerfectHashCHeaderRawCStr),
#ifdef _WIN64
    0,
#endif
    (PCHAR)&CompiledPerfectHashCHeaderRawCStr,
};

#ifndef RawCString
#define RawCString (&CompiledPerfectHashCHeaderRawCString)
#endif
