//
// Auto-generated.
//

DECLSPEC_ALIGN(16)
const CHAR MakefileMakefileRawCStr[] =
    "# boilermake: A reusable, but flexible, boilerplate Makefile.\n"
    "#\n"
    "# Copyright 2008, 2009, 2010 Dan Moulding, Alan T. DeKok\n"
    "#\n"
    "# This program is free software: you can redistribute it and/or modify\n"
    "# it under the terms of the GNU General Public License as published by\n"
    "# the Free Software Foundation, either version 3 of the License, or\n"
    "# (at your option) any later version.\n"
    "#\n"
    "# This program is distributed in the hope that it will be useful,\n"
    "# but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
    "# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
    "# GNU General Public License for more details.\n"
    "#\n"
    "# You should have received a copy of the GNU General Public License\n"
    "# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n"
    "\n"
    "# Caution: Don't edit this Makefile! Create your own main.mk and other\n"
    "#          submakefiles, which will be included by this Makefile.\n"
    "#          Only edit this if you need to modify boilermake's behavior (fix\n"
    "#          bugs, add features, etc).\n"
    "\n"
    "# Note: Parameterized \"functions\" in this makefile that are marked with\n"
    "#       \"USE WITH EVAL\" are only useful in conjuction with eval. This is\n"
    "#       because those functions result in a block of Makefile syntax that must\n"
    "#       be evaluated after expansion. Since they must be used with eval, most\n"
    "#       instances of \"$\" within them need to be escaped with a second \"$\" to\n"
    "#       accomodate the double expansion that occurs when eval is invoked.\n"
    "\n"
    "# ADD_CLEAN_RULE - Parameterized \"function\" that adds a new rule and phony\n"
    "#   target for cleaning the specified target (removing its build-generated\n"
    "#   files).\n"
    "#\n"
    "#   USE WITH EVAL\n"
    "#\n"
    "define ADD_CLEAN_RULE\n"
    "    clean: clean_${1}\n"
    "    .PHONY: clean_${1}\n"
    "    clean_${1}:\n"
    "	$$(strip rm -f ${TARGET_DIR}/${1} $${${1}_OBJS:%.o=%.[doP]})\n"
    "	$${${1}_POSTCLEAN}\n"
    "endef\n"
    "\n"
    "# ADD_OBJECT_RULE - Parameterized \"function\" that adds a pattern rule for\n"
    "#   building object files from source files with the filename extension\n"
    "#   specified in the second argument. The first argument must be the name of the\n"
    "#   base directory where the object files should reside (such that the portion\n"
    "#   of the path after the base directory will match the path to corresponding\n"
    "#   source files). The third argument must contain the rules used to compile the\n"
    "#   source files into object code form.\n"
    "#\n"
    "#   USE WITH EVAL\n"
    "#\n"
    "define ADD_OBJECT_RULE\n"
    "${1}/%.o: ${2}\n"
    "	${3}\n"
    "endef\n"
    "\n"
    "# ADD_TARGET_RULE - Parameterized \"function\" that adds a new target to the\n"
    "#   Makefile. The target may be an executable or a library. The two allowable\n"
    "#   types of targets are distinguished based on the name: library targets must\n"
    "#   end with the traditional \".a\" extension.\n"
    "#\n"
    "#   USE WITH EVAL\n"
    "#\n"
    "define ADD_TARGET_RULE\n"
    "    ifeq \"$$(suffix ${1})\" \".a\"\n"
    "        # Add a target for creating a static library.\n"
    "        $${TARGET_DIR}/${1}: $${${1}_OBJS}\n"
    "	    @mkdir -p $$(dir $$@)\n"
    "	    $$(strip $${AR} $${ARFLAGS} $$@ $${${1}_OBJS})\n"
    "	    $${${1}_POSTMAKE}\n"
    "    else\n"
    "        # Add a target for linking an executable. First, attempt to select the\n"
    "        # appropriate front-end to use for linking. This might not choose the\n"
    "        # right one (e.g. if linking with a C++ static library, but all other\n"
    "        # sources are C sources), so the user makefile is allowed to specify a\n"
    "        # linker to be used for each target.\n"
    "        ifeq \"$$(strip $${${1}_LINKER})\" \"\"\n"
    "            # No linker was explicitly specified to be used for this target. If\n"
    "            # there are any C++ sources for this target, use the C++ compiler.\n"
    "            # For all other targets, default to using the C compiler.\n"
    "            ifneq \"$$(strip $$(filter $${CXX_SRC_EXTS},$${${1}_SOURCES}))\" \"\"\n"
    "                ${1}_LINKER = $${CXX}\n"
    "            else\n"
    "                ${1}_LINKER = $${CC}\n"
    "            endif\n"
    "        endif\n"
    "\n"
    "        $${TARGET_DIR}/${1}: $${${1}_OBJS} $${${1}_PREREQS}\n"
    "	    @mkdir -p $$(dir $$@)\n"
    "	    $$(strip $${${1}_LINKER} -o $$@ $${LDFLAGS} $${${1}_LDFLAGS} \\\n"
    "	        $${${1}_OBJS} $${LDLIBS} $${${1}_LDLIBS})\n"
    "	    $${${1}_POSTMAKE}\n"
    "    endif\n"
    "endef\n"
    "\n"
    "# CANONICAL_PATH - Given one or more paths, converts the paths to the canonical\n"
    "#   form. The canonical form is the path, relative to the project's top-level\n"
    "#   directory (the directory from which \"make\" is run), and without\n"
    "#   any \"./\" or \"../\" sequences. For paths that are not  located below the\n"
    "#   top-level directory, the canonical form is the absolute path (i.e. from\n"
    "#   the root of the filesystem) also without \"./\" or \"../\" sequences.\n"
    "define CANONICAL_PATH\n"
    "$(patsubst ${CURDIR}/%,%,$(abspath ${1}))\n"
    "endef\n"
    "\n"
    "# COMPILE_C_CMDS - Commands for compiling C source code.\n"
    "define COMPILE_C_CMDS\n"
    "	@mkdir -p $(dir $@)\n"
    "	$(strip ${CC} -o $@ -c -MD ${CFLAGS} ${SRC_CFLAGS} ${INCDIRS} \\\n"
    "	    ${SRC_INCDIRS} ${SRC_DEFS} ${DEFS} $<)\n"
    "	@cp ${@:%$(suffix $@)=%.d} ${@:%$(suffix $@)=%.P}; \\\n"
    "	 sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n"
    "	     -e '/^$$/ d' -e 's/$$/ :/' < ${@:%$(suffix $@)=%.d} \\\n"
    "	     >> ${@:%$(suffix $@)=%.P}; \\\n"
    "	 rm -f ${@:%$(suffix $@)=%.d}\n"
    "endef\n"
    "\n"
    "# COMPILE_CXX_CMDS - Commands for compiling C++ source code.\n"
    "define COMPILE_CXX_CMDS\n"
    "	@mkdir -p $(dir $@)\n"
    "	$(strip ${CXX} -o $@ -c -MD ${CXXFLAGS} ${SRC_CXXFLAGS} ${INCDIRS} \\\n"
    "	    ${SRC_INCDIRS} ${SRC_DEFS} ${DEFS} $<)\n"
    "	@cp ${@:%$(suffix $@)=%.d} ${@:%$(suffix $@)=%.P}; \\\n"
    "	 sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\\\$$//' \\\n"
    "	     -e '/^$$/ d' -e 's/$$/ :/' < ${@:%$(suffix $@)=%.d} \\\n"
    "	     >> ${@:%$(suffix $@)=%.P}; \\\n"
    "	 rm -f ${@:%$(suffix $@)=%.d}\n"
    "endef\n"
    "\n"
    "# INCLUDE_SUBMAKEFILE - Parameterized \"function\" that includes a new\n"
    "#   \"submakefile\" fragment into the overall Makefile. It also recursively\n"
    "#   includes all submakefiles of the specified submakefile fragment.\n"
    "#\n"
    "#   USE WITH EVAL\n"
    "#\n"
    "define INCLUDE_SUBMAKEFILE\n"
    "    # Initialize all variables that can be defined by a makefile fragment, then\n"
    "    # include the specified makefile fragment.\n"
    "    TARGET        :=\n"
    "    TGT_CFLAGS    :=\n"
    "    TGT_CXXFLAGS  :=\n"
    "    TGT_DEFS      :=\n"
    "    TGT_INCDIRS   :=\n"
    "    TGT_LDFLAGS   :=\n"
    "    TGT_LDLIBS    :=\n"
    "    TGT_LINKER    :=\n"
    "    TGT_POSTCLEAN :=\n"
    "    TGT_POSTMAKE  :=\n"
    "    TGT_PREREQS   :=\n"
    "\n"
    "    SOURCES       :=\n"
    "    SRC_CFLAGS    :=\n"
    "    SRC_CXXFLAGS  :=\n"
    "    SRC_DEFS      :=\n"
    "    SRC_INCDIRS   :=\n"
    "\n"
    "    SUBMAKEFILES  :=\n"
    "\n"
    "    # A directory stack is maintained so that the correct paths are used as we\n"
    "    # recursively include all submakefiles. Get the makefile's directory and\n"
    "    # push it onto the stack.\n"
    "    DIR := $(call CANONICAL_PATH,$(dir ${1}))\n"
    "    DIR_STACK := $$(call PUSH,$${DIR_STACK},$${DIR})\n"
    "\n"
    "    include ${1}\n"
    "\n"
    "    # Initialize internal local variables.\n"
    "    OBJS :=\n"
    "\n"
    "    # Ensure that valid values are set for BUILD_DIR and TARGET_DIR.\n"
    "    ifeq \"$$(strip $${BUILD_DIR})\" \"\"\n"
    "        BUILD_DIR := build\n"
    "    endif\n"
    "    ifeq \"$$(strip $${TARGET_DIR})\" \"\"\n"
    "        TARGET_DIR := .\n"
    "    endif\n"
    "\n"
    "    # Determine which target this makefile's variables apply to. A stack is\n"
    "    # used to keep track of which target is the \"current\" target as we\n"
    "    # recursively include other submakefiles.\n"
    "    ifneq \"$$(strip $${TARGET})\" \"\"\n"
    "        # This makefile defined a new target. Target variables defined by this\n"
    "        # makefile apply to this new target. Initialize the target's variables.\n"
    "        TGT := $$(strip $${TARGET})\n"
    "        ALL_TGTS += $${TGT}\n"
    "        $${TGT}_CFLAGS    := $${TGT_CFLAGS}\n"
    "        $${TGT}_CXXFLAGS  := $${TGT_CXXFLAGS}\n"
    "        $${TGT}_DEFS      := $${TGT_DEFS}\n"
    "        $${TGT}_DEPS      :=\n"
    "        TGT_INCDIRS       := $$(call QUALIFY_PATH,$${DIR},$${TGT_INCDIRS})\n"
    "        TGT_INCDIRS       := $$(call CANONICAL_PATH,$${TGT_INCDIRS})\n"
    "        $${TGT}_INCDIRS   := $${TGT_INCDIRS}\n"
    "        $${TGT}_LDFLAGS   := $${TGT_LDFLAGS}\n"
    "        $${TGT}_LDLIBS    := $${TGT_LDLIBS}\n"
    "        $${TGT}_LINKER    := $${TGT_LINKER}\n"
    "        $${TGT}_OBJS      :=\n"
    "        $${TGT}_POSTCLEAN := $${TGT_POSTCLEAN}\n"
    "        $${TGT}_POSTMAKE  := $${TGT_POSTMAKE}\n"
    "        $${TGT}_PREREQS   := $$(addprefix $${TARGET_DIR}/,$${TGT_PREREQS})\n"
    "        $${TGT}_SOURCES   :=\n"
    "    else\n"
    "        # The values defined by this makefile apply to the the \"current\" target\n"
    "        # as determined by which target is at the top of the stack.\n"
    "        TGT := $$(strip $$(call PEEK,$${TGT_STACK}))\n"
    "        $${TGT}_CFLAGS    += $${TGT_CFLAGS}\n"
    "        $${TGT}_CXXFLAGS  += $${TGT_CXXFLAGS}\n"
    "        $${TGT}_DEFS      += $${TGT_DEFS}\n"
    "        TGT_INCDIRS       := $$(call QUALIFY_PATH,$${DIR},$${TGT_INCDIRS})\n"
    "        TGT_INCDIRS       := $$(call CANONICAL_PATH,$${TGT_INCDIRS})\n"
    "        $${TGT}_INCDIRS   += $${TGT_INCDIRS}\n"
    "        $${TGT}_LDFLAGS   += $${TGT_LDFLAGS}\n"
    "        $${TGT}_LDLIBS    += $${TGT_LDLIBS}\n"
    "        $${TGT}_POSTCLEAN += $${TGT_POSTCLEAN}\n"
    "        $${TGT}_POSTMAKE  += $${TGT_POSTMAKE}\n"
    "        $${TGT}_PREREQS   += $${TGT_PREREQS}\n"
    "    endif\n"
    "\n"
    "    # Push the current target onto the target stack.\n"
    "    TGT_STACK := $$(call PUSH,$${TGT_STACK},$${TGT})\n"
    "\n"
    "    ifneq \"$$(strip $${SOURCES})\" \"\"\n"
    "        # This makefile builds one or more objects from source. Validate the\n"
    "        # specified sources against the supported source file types.\n"
    "        BAD_SRCS := $$(strip $$(filter-out $${ALL_SRC_EXTS},$${SOURCES}))\n"
    "        ifneq \"$${BAD_SRCS}\" \"\"\n"
    "            $$(error Unsupported source file(s) found in ${1} [$${BAD_SRCS}])\n"
    "        endif\n"
    "\n"
    "        # Qualify and canonicalize paths.\n"
    "        SOURCES     := $$(call QUALIFY_PATH,$${DIR},$${SOURCES})\n"
    "        SOURCES     := $$(call CANONICAL_PATH,$${SOURCES})\n"
    "        SRC_INCDIRS := $$(call QUALIFY_PATH,$${DIR},$${SRC_INCDIRS})\n"
    "        SRC_INCDIRS := $$(call CANONICAL_PATH,$${SRC_INCDIRS})\n"
    "\n"
    "        # Save the list of source files for this target.\n"
    "        $${TGT}_SOURCES += $${SOURCES}\n"
    "\n"
    "        # Convert the source file names to their corresponding object file\n"
    "        # names.\n"
    "        OBJS := $$(addprefix $${BUILD_DIR}/$$(call CANONICAL_PATH,$${TGT})/,\\\n"
    "                   $$(addsuffix .o,$$(basename $${SOURCES})))\n"
    "\n"
    "        # Add the objects to the current target's list of objects, and create\n"
    "        # target-specific variables for the objects based on any source\n"
    "        # variables that were defined.\n"
    "        $${TGT}_OBJS += $${OBJS}\n"
    "        $${TGT}_DEPS += $${OBJS:%.o=%.P}\n"
    "        $${OBJS}: SRC_CFLAGS   := $${$${TGT}_CFLAGS} $${SRC_CFLAGS}\n"
    "        $${OBJS}: SRC_CXXFLAGS := $${$${TGT}_CXXFLAGS} $${SRC_CXXFLAGS}\n"
    "        $${OBJS}: SRC_DEFS     := $$(addprefix -D,$${$${TGT}_DEFS} $${SRC_DEFS})\n"
    "        $${OBJS}: SRC_INCDIRS  := $$(addprefix -I,\\\n"
    "                                     $${$${TGT}_INCDIRS} $${SRC_INCDIRS})\n"
    "    endif\n"
    "\n"
    "    ifneq \"$$(strip $${SUBMAKEFILES})\" \"\"\n"
    "        # This makefile has submakefiles. Recursively include them.\n"
    "        $$(foreach MK,$${SUBMAKEFILES},\\\n"
    "           $$(eval $$(call INCLUDE_SUBMAKEFILE,\\\n"
    "                      $$(call CANONICAL_PATH,\\\n"
    "                         $$(call QUALIFY_PATH,$${DIR},$${MK})))))\n"
    "    endif\n"
    "\n"
    "    # Reset the \"current\" target to it's previous value.\n"
    "    TGT_STACK := $$(call POP,$${TGT_STACK})\n"
    "    TGT := $$(call PEEK,$${TGT_STACK})\n"
    "\n"
    "    # Reset the \"current\" directory to it's previous value.\n"
    "    DIR_STACK := $$(call POP,$${DIR_STACK})\n"
    "    DIR := $$(call PEEK,$${DIR_STACK})\n"
    "endef\n"
    "\n"
    "# MIN - Parameterized \"function\" that results in the minimum lexical value of\n"
    "#   the two values given.\n"
    "define MIN\n"
    "$(firstword $(sort ${1} ${2}))\n"
    "endef\n"
    "\n"
    "# PEEK - Parameterized \"function\" that results in the value at the top of the\n"
    "#   specified colon-delimited stack.\n"
    "define PEEK\n"
    "$(lastword $(subst :, ,${1}))\n"
    "endef\n"
    "\n"
    "# POP - Parameterized \"function\" that pops the top value off of the specified\n"
    "#   colon-delimited stack, and results in the new value of the stack. Note that\n"
    "#   the popped value cannot be obtained using this function; use peek for that.\n"
    "define POP\n"
    "${1:%:$(lastword $(subst :, ,${1}))=%}\n"
    "endef\n"
    "\n"
    "# PUSH - Parameterized \"function\" that pushes a value onto the specified colon-\n"
    "#   delimited stack, and results in the new value of the stack.\n"
    "define PUSH\n"
    "${2:%=${1}:%}\n"
    "endef\n"
    "\n"
    "# QUALIFY_PATH - Given a \"root\" directory and one or more paths, qualifies the\n"
    "#   paths using the \"root\" directory (i.e. appends the root directory name to\n"
    "#   the paths) except for paths that are absolute.\n"
    "define QUALIFY_PATH\n"
    "$(addprefix ${1}/,$(filter-out /%,${2})) $(filter /%,${2})\n"
    "endef\n"
    "\n"
    "###############################################################################\n"
    "#\n"
    "# Start of Makefile Evaluation\n"
    "#\n"
    "###############################################################################\n"
    "\n"
    "# Older versions of GNU Make lack capabilities needed by boilermake.\n"
    "# With older versions, \"make\" may simply output \"nothing to do\", likely leading\n"
    "# to confusion. To avoid this, check the version of GNU make up-front and\n"
    "# inform the user if their version of make doesn't meet the minimum required.\n"
    "MIN_MAKE_VERSION := 3.81\n"
    "MIN_MAKE_VER_MSG := boilermake requires GNU Make ${MIN_MAKE_VERSION} or greater\n"
    "ifeq \"${MAKE_VERSION}\" \"\"\n"
    "    $(info GNU Make not detected)\n"
    "    $(error ${MIN_MAKE_VER_MSG})\n"
    "endif\n"
    "ifneq \"${MIN_MAKE_VERSION}\" \"$(call MIN,${MIN_MAKE_VERSION},${MAKE_VERSION})\"\n"
    "    $(info This is GNU Make version ${MAKE_VERSION})\n"
    "    $(error ${MIN_MAKE_VER_MSG})\n"
    "endif\n"
    "\n"
    "# Define the source file extensions that we know how to handle.\n"
    "C_SRC_EXTS := %.c\n"
    "CXX_SRC_EXTS := %.C %.cc %.cp %.cpp %.CPP %.cxx %.c++\n"
    "ALL_SRC_EXTS := ${C_SRC_EXTS} ${CXX_SRC_EXTS}\n"
    "\n"
    "# Initialize global variables.\n"
    "ALL_TGTS :=\n"
    "DEFS :=\n"
    "DIR_STACK :=\n"
    "INCDIRS :=\n"
    "TGT_STACK :=\n"
    "\n"
    "# Include the main user-supplied submakefile. This also recursively includes\n"
    "# all other user-supplied submakefiles.\n"
    "$(eval $(call INCLUDE_SUBMAKEFILE,main.mk))\n"
    "\n"
    "# Perform post-processing on global variables as needed.\n"
    "DEFS := $(addprefix -D,${DEFS})\n"
    "INCDIRS := $(addprefix -I,$(call CANONICAL_PATH,${INCDIRS}))\n"
    "\n"
    "# Define the \"all\" target (which simply builds all user-defined targets) as the\n"
    "# default goal.\n"
    ".PHONY: all\n"
    "all: $(addprefix ${TARGET_DIR}/,${ALL_TGTS})\n"
    "\n"
    "# Add a new target rule for each user-defined target.\n"
    "$(foreach TGT,${ALL_TGTS},\\\n"
    "  $(eval $(call ADD_TARGET_RULE,${TGT})))\n"
    "\n"
    "# Add pattern rule(s) for creating compiled object code from C source.\n"
    "$(foreach TGT,${ALL_TGTS},\\\n"
    "  $(foreach EXT,${C_SRC_EXTS},\\\n"
    "    $(eval $(call ADD_OBJECT_RULE,${BUILD_DIR}/$(call CANONICAL_PATH,${TGT}),\\\n"
    "             ${EXT},$${COMPILE_C_CMDS}))))\n"
    "\n"
    "# Add pattern rule(s) for creating compiled object code from C++ source.\n"
    "$(foreach TGT,${ALL_TGTS},\\\n"
    "  $(foreach EXT,${CXX_SRC_EXTS},\\\n"
    "    $(eval $(call ADD_OBJECT_RULE,${BUILD_DIR}/$(call CANONICAL_PATH,${TGT}),\\\n"
    "             ${EXT},$${COMPILE_CXX_CMDS}))))\n"
    "\n"
    "# Add \"clean\" rules to remove all build-generated files.\n"
    ".PHONY: clean\n"
    "$(foreach TGT,${ALL_TGTS},\\\n"
    "  $(eval $(call ADD_CLEAN_RULE,${TGT})))\n"
    "\n"
    "# Include generated rules that define additional (header) dependencies.\n"
    "$(foreach TGT,${ALL_TGTS},\\\n"
    "  $(eval -include ${${TGT}_DEPS}))\n"
;

const STRING MakefileMakefileRawCString = {
    sizeof(MakefileMakefileRawCStr) - sizeof(CHAR),
    sizeof(MakefileMakefileRawCStr),
#ifdef _WIN64
    0,
#endif
    (PCHAR)&MakefileMakefileRawCStr,
};

#ifndef RawCString
#define RawCString (&MakefileMakefileRawCString)
#endif
