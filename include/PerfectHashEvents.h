//**********************************************************************`
//* This is an include file generated by Message Compiler.             *`
//*                                                                    *`
//* Copyright (c) Microsoft Corporation. All Rights Reserved.          *`
//**********************************************************************`
#pragma once

//*****************************************************************************
//
// Notes on the ETW event code generated by MC:
//
// - Structures and arrays of structures are treated as an opaque binary blob.
//   The caller is responsible for packing the data for the structure into a
//   single region of memory, with no padding between values. The macro will
//   have an extra parameter for the length of the blob.
// - Arrays of nul-terminated strings must be packed by the caller into a
//   single binary blob containing the correct number of strings, with a nul
//   after each string. The size of the blob is specified in characters, and
//   includes the final nul.
// - Arrays of SID are treated as a single binary blob. The caller is
//   responsible for packing the SID values into a single region of memory with
//   no padding.
// - The length attribute on the data element in the manifest is significant
//   for values with intype win:UnicodeString, win:AnsiString, or win:Binary.
//   The length attribute must be specified for win:Binary, and is optional for
//   win:UnicodeString and win:AnsiString (if no length is given, the strings
//   are assumed to be nul-terminated). For win:UnicodeString, the length is
//   measured in characters, not bytes.
// - For an array of win:UnicodeString, win:AnsiString, or win:Binary, the
//   length attribute applies to every value in the array, so every value in
//   the array must have the same length. The values in the array are provided
//   to the macro via a single pointer -- the caller is responsible for packing
//   all of the values into a single region of memory with no padding between
//   values.
// - Values of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary can be generated and collected on Vista or later.
//   However, they may not decode properly without the Windows 10 2018 Fall
//   Update.
// - Arrays of type win:CountedUnicodeString, win:CountedAnsiString, and
//   win:CountedBinary must be packed by the caller into a single region of
//   memory. The format for each item is a UINT16 byte-count followed by that
//   many bytes of data. When providing the array to the generated macro, you
//   must provide the total size of the packed array data, including the UINT16
//   sizes for each item. In the case of win:CountedUnicodeString, the data
//   size is specified in WCHAR (16-bit) units. In the case of
//   win:CountedAnsiString and win:CountedBinary, the data size is specified in
//   bytes.
//
//*****************************************************************************

#include <wmistr.h>
#include <evntrace.h>
#include <evntprov.h>

#ifndef ETW_INLINE
  #ifdef _ETW_KM_
    // In kernel mode, save stack space by never inlining templates.
    #define ETW_INLINE DECLSPEC_NOINLINE __inline
  #else
    // In user mode, save code size by inlining templates as appropriate.
    #define ETW_INLINE __inline
  #endif
#endif // ETW_INLINE

#if defined(__cplusplus)
extern "C" {
#endif

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_USE_KERNEL_MODE_APIS macro:
// Controls whether the generated code uses kernel-mode or user-mode APIs.
// - Set to 0 to use Windows user-mode APIs such as EventRegister.
// - Set to 1 to use Windows kernel-mode APIs such as EtwRegister.
// Default is based on whether the _ETW_KM_ macro is defined (i.e. by wdm.h).
// Note that the APIs can also be overridden directly, e.g. by setting the
// MCGEN_EVENTWRITETRANSFER or MCGEN_EVENTREGISTER macros.
//
#ifndef MCGEN_USE_KERNEL_MODE_APIS
  #ifdef _ETW_KM_
    #define MCGEN_USE_KERNEL_MODE_APIS 1
  #else
    #define MCGEN_USE_KERNEL_MODE_APIS 0
  #endif
#endif // MCGEN_USE_KERNEL_MODE_APIS

//
// MCGEN_HAVE_EVENTSETINFORMATION macro:
// Controls how McGenEventSetInformation uses the EventSetInformation API.
// - Set to 0 to disable the use of EventSetInformation
//   (McGenEventSetInformation will always return an error).
// - Set to 1 to directly invoke MCGEN_EVENTSETINFORMATION.
// - Set to 2 to to locate EventSetInformation at runtime via GetProcAddress
//   (user-mode) or MmGetSystemRoutineAddress (kernel-mode).
// Default is determined as follows:
// - If MCGEN_EVENTSETINFORMATION has been customized, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else if the target OS version has EventSetInformation, set to 1
//   (i.e. use MCGEN_EVENTSETINFORMATION).
// - Else set to 2 (i.e. try to dynamically locate EventSetInformation).
// Note that an McGenEventSetInformation function will only be generated if one
// or more provider in a manifest has provider traits.
//
#ifndef MCGEN_HAVE_EVENTSETINFORMATION
  #ifdef MCGEN_EVENTSETINFORMATION             // if MCGEN_EVENTSETINFORMATION has been customized,
    #define MCGEN_HAVE_EVENTSETINFORMATION   1 //   directly invoke MCGEN_EVENTSETINFORMATION(...).
  #elif MCGEN_USE_KERNEL_MODE_APIS             // else if using kernel-mode APIs,
    #if NTDDI_VERSION >= 0x06040000            //   if target OS is Windows 10 or later,
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EtwSetInformation" via MmGetSystemRoutineAddress.
    #endif                                     // else (using user-mode APIs)
  #else                                        //   if target OS and SDK is Windows 8 or later,
    #if WINVER >= 0x0602 && defined(EVENT_FILTER_TYPE_SCHEMATIZED)
      #define MCGEN_HAVE_EVENTSETINFORMATION 1 //     directly invoke MCGEN_EVENTSETINFORMATION(...).
    #else                                      //   else
      #define MCGEN_HAVE_EVENTSETINFORMATION 2 //     find "EventSetInformation" via GetModuleHandleExW/GetProcAddress.
    #endif
  #endif
#endif // MCGEN_HAVE_EVENTSETINFORMATION

//
// MCGEN Override Macros
//
// The following override macros may be defined before including this header
// to control the APIs used by this header:
//
// - MCGEN_EVENTREGISTER
// - MCGEN_EVENTUNREGISTER
// - MCGEN_EVENTSETINFORMATION
// - MCGEN_EVENTWRITETRANSFER
//
// If the the macro is undefined, the MC implementation will default to the
// corresponding ETW APIs. For example, if the MCGEN_EVENTREGISTER macro is
// undefined, the EventRegister[MyProviderName] macro will use EventRegister
// in user mode and will use EtwRegister in kernel mode.
//
// To prevent issues from conflicting definitions of these macros, the value
// of the override macro will be used as a suffix in certain internal function
// names. Because of this, the override macros must follow certain rules:
//
// - The macro must be defined before any MC-generated header is included and
//   must not be undefined or redefined after any MC-generated header is
//   included. Different translation units (i.e. different .c or .cpp files)
//   may set the macros to different values, but within a translation unit
//   (within a single .c or .cpp file), the macro must be set once and not
//   changed.
// - The override must be an object-like macro, not a function-like macro
//   (i.e. the override macro must not have a parameter list).
// - The override macro's value must be a simple identifier, i.e. must be
//   something that starts with a letter or '_' and contains only letters,
//   numbers, and '_' characters.
// - If the override macro's value is the name of a second object-like macro,
//   the second object-like macro must follow the same rules. (The override
//   macro's value can also be the name of a function-like macro, in which
//   case the function-like macro does not need to follow the same rules.)
//
// For example, the following will cause compile errors:
//
//   #define MCGEN_EVENTWRITETRANSFER MyNamespace::MyClass::MyFunction // Value has non-identifier characters (colon).
//   #define MCGEN_EVENTWRITETRANSFER GetEventWriteFunctionPointer(7)  // Value has non-identifier characters (parentheses).
//   #define MCGEN_EVENTWRITETRANSFER(h,e,a,r,c,d) EventWrite(h,e,c,d) // Override is defined as a function-like macro.
//   #define MY_OBJECT_LIKE_MACRO     MyNamespace::MyClass::MyEventWriteFunction
//   #define MCGEN_EVENTWRITETRANSFER MY_OBJECT_LIKE_MACRO // Evaluates to something with non-identifier characters (colon).
//
// The following would be ok:
//
//   #define MCGEN_EVENTWRITETRANSFER  MyEventWriteFunction1  // OK, suffix will be "MyEventWriteFunction1".
//   #define MY_OBJECT_LIKE_MACRO      MyEventWriteFunction2
//   #define MCGEN_EVENTWRITETRANSFER  MY_OBJECT_LIKE_MACRO   // OK, suffix will be "MyEventWriteFunction2".
//   #define MY_FUNCTION_LIKE_MACRO(h,e,a,r,c,d) MyNamespace::MyClass::MyEventWriteFunction3(h,e,c,d)
//   #define MCGEN_EVENTWRITETRANSFER  MY_FUNCTION_LIKE_MACRO // OK, suffix will be "MY_FUNCTION_LIKE_MACRO".
//
#ifndef MCGEN_EVENTREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTREGISTER        EtwRegister
  #else
    #define MCGEN_EVENTREGISTER        EventRegister
  #endif
#endif // MCGEN_EVENTREGISTER
#ifndef MCGEN_EVENTUNREGISTER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTUNREGISTER      EtwUnregister
  #else
    #define MCGEN_EVENTUNREGISTER      EventUnregister
  #endif
#endif // MCGEN_EVENTUNREGISTER
#ifndef MCGEN_EVENTSETINFORMATION
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTSETINFORMATION  EtwSetInformation
  #else
    #define MCGEN_EVENTSETINFORMATION  EventSetInformation
  #endif
#endif // MCGEN_EVENTSETINFORMATION
#ifndef MCGEN_EVENTWRITETRANSFER
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define MCGEN_EVENTWRITETRANSFER   EtwWriteTransfer
  #else
    #define MCGEN_EVENTWRITETRANSFER   EventWriteTransfer
  #endif
#endif // MCGEN_EVENTWRITETRANSFER

//
// MCGEN_EVENT_ENABLED macro:
// Override to control how the EventWrite[EventName] macros determine whether
// an event is enabled. The default behavior is for EventWrite[EventName] to
// use the EventEnabled[EventName] macros.
//
#ifndef MCGEN_EVENT_ENABLED
#define MCGEN_EVENT_ENABLED(EventName) EventEnabled##EventName()
#endif

//
// MCGEN_EVENT_ENABLED_FORCONTEXT macro:
// Override to control how the EventWrite[EventName]_ForContext macros
// determine whether an event is enabled. The default behavior is for
// EventWrite[EventName]_ForContext to use the
// EventEnabled[EventName]_ForContext macros.
//
#ifndef MCGEN_EVENT_ENABLED_FORCONTEXT
#define MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, EventName) EventEnabled##EventName##_ForContext(pContext)
#endif

//
// MCGEN_ENABLE_CHECK macro:
// Determines whether the specified event would be considered as enabled
// based on the state of the specified context. Slightly faster than calling
// McGenEventEnabled directly.
//
#ifndef MCGEN_ENABLE_CHECK
#define MCGEN_ENABLE_CHECK(Context, Descriptor) (Context.IsEnabled && McGenEventEnabled(&Context, &Descriptor))
#endif

#if !defined(MCGEN_TRACE_CONTEXT_DEF)
#define MCGEN_TRACE_CONTEXT_DEF
// This structure is for use by MC-generated code and should not be used directly.
typedef struct _MCGEN_TRACE_CONTEXT
{
    TRACEHANDLE            RegistrationHandle;
    TRACEHANDLE            Logger;      // Used as pointer to provider traits.
    ULONGLONG              MatchAnyKeyword;
    ULONGLONG              MatchAllKeyword;
    ULONG                  Flags;
    ULONG                  IsEnabled;
    UCHAR                  Level;
    UCHAR                  Reserve;
    USHORT                 EnableBitsCount;
    PULONG                 EnableBitMask;
    const ULONGLONG*       EnableKeyWords;
    const UCHAR*           EnableLevel;
} MCGEN_TRACE_CONTEXT, *PMCGEN_TRACE_CONTEXT;
#endif // MCGEN_TRACE_CONTEXT_DEF

#if !defined(MCGEN_LEVEL_KEYWORD_ENABLED_DEF)
#define MCGEN_LEVEL_KEYWORD_ENABLED_DEF
//
// Determines whether an event with a given Level and Keyword would be
// considered as enabled based on the state of the specified context.
// Note that you may want to use MCGEN_ENABLE_CHECK instead of calling this
// function directly.
//
FORCEINLINE
BOOLEAN
McGenLevelKeywordEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ UCHAR Level,
    _In_ ULONGLONG Keyword
    )
{
    //
    // Check if the event Level is lower than the level at which
    // the channel is enabled.
    // If the event Level is 0 or the channel is enabled at level 0,
    // all levels are enabled.
    //

    if ((Level <= EnableInfo->Level) || // This also covers the case of Level == 0.
        (EnableInfo->Level == 0)) {

        //
        // Check if Keyword is enabled
        //

        if ((Keyword == (ULONGLONG)0) ||
            ((Keyword & EnableInfo->MatchAnyKeyword) &&
             ((Keyword & EnableInfo->MatchAllKeyword) == EnableInfo->MatchAllKeyword))) {
            return TRUE;
        }
    }

    return FALSE;
}
#endif // MCGEN_LEVEL_KEYWORD_ENABLED_DEF

#if !defined(MCGEN_EVENT_ENABLED_DEF)
#define MCGEN_EVENT_ENABLED_DEF
//
// Determines whether the specified event would be considered as enabled based
// on the state of the specified context. Note that you may want to use
// MCGEN_ENABLE_CHECK instead of calling this function directly.
//
FORCEINLINE
BOOLEAN
McGenEventEnabled(
    _In_ PMCGEN_TRACE_CONTEXT EnableInfo,
    _In_ PCEVENT_DESCRIPTOR EventDescriptor
    )
{
    return McGenLevelKeywordEnabled(EnableInfo, EventDescriptor->Level, EventDescriptor->Keyword);
}
#endif // MCGEN_EVENT_ENABLED_DEF

#if !defined(MCGEN_CONTROL_CALLBACK)
#define MCGEN_CONTROL_CALLBACK

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
VOID
__stdcall
McGenControlCallbackV2(
    _In_ LPCGUID SourceId,
    _In_ ULONG ControlCode,
    _In_ UCHAR Level,
    _In_ ULONGLONG MatchAnyKeyword,
    _In_ ULONGLONG MatchAllKeyword,
    _In_opt_ PEVENT_FILTER_DESCRIPTOR FilterData,
    _Inout_opt_ PVOID CallbackContext
    )
/*++

Routine Description:

    This is the notification callback for Windows Vista and later.

Arguments:

    SourceId - The GUID that identifies the session that enabled the provider.

    ControlCode - The parameter indicates whether the provider
                  is being enabled or disabled.

    Level - The level at which the event is enabled.

    MatchAnyKeyword - The bitmask of keywords that the provider uses to
                      determine the category of events that it writes.

    MatchAllKeyword - This bitmask additionally restricts the category
                      of events that the provider writes.

    FilterData - The provider-defined data.

    CallbackContext - The context of the callback that is defined when the provider
                      called EtwRegister to register itself.

Remarks:

    ETW calls this function to notify provider of enable/disable

--*/
{
    PMCGEN_TRACE_CONTEXT Ctx = (PMCGEN_TRACE_CONTEXT)CallbackContext;
    ULONG Ix;
#ifndef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    UNREFERENCED_PARAMETER(SourceId);
    UNREFERENCED_PARAMETER(FilterData);
#endif

    if (Ctx == NULL) {
        return;
    }

    switch (ControlCode) {

        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            Ctx->Level = Level;
            Ctx->MatchAnyKeyword = MatchAnyKeyword;
            Ctx->MatchAllKeyword = MatchAllKeyword;
            Ctx->IsEnabled = EVENT_CONTROL_CODE_ENABLE_PROVIDER;

            for (Ix = 0; Ix < Ctx->EnableBitsCount; Ix += 1) {
                if (McGenLevelKeywordEnabled(Ctx, Ctx->EnableLevel[Ix], Ctx->EnableKeyWords[Ix]) != FALSE) {
                    Ctx->EnableBitMask[Ix >> 5] |= (1 << (Ix % 32));
                } else {
                    Ctx->EnableBitMask[Ix >> 5] &= ~(1 << (Ix % 32));
                }
            }
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            Ctx->IsEnabled = EVENT_CONTROL_CODE_DISABLE_PROVIDER;
            Ctx->Level = 0;
            Ctx->MatchAnyKeyword = 0;
            Ctx->MatchAllKeyword = 0;
            if (Ctx->EnableBitsCount > 0) {
#pragma warning(suppress: 26451) // Arithmetic overflow cannot occur, no matter the value of EnableBitCount
                RtlZeroMemory(Ctx->EnableBitMask, (((Ctx->EnableBitsCount - 1) / 32) + 1) * sizeof(ULONG));
            }
            break;

        default:
            break;
    }

#ifdef MCGEN_PRIVATE_ENABLE_CALLBACK_V2
    //
    // Call user defined callback
    //
    MCGEN_PRIVATE_ENABLE_CALLBACK_V2(
        SourceId,
        ControlCode,
        Level,
        MatchAnyKeyword,
        MatchAllKeyword,
        FilterData,
        CallbackContext
        );
#endif // MCGEN_PRIVATE_ENABLE_CALLBACK_V2

    return;
}

#endif // MCGEN_CONTROL_CALLBACK

#ifndef _mcgen_PENABLECALLBACK
  #if MCGEN_USE_KERNEL_MODE_APIS
    #define _mcgen_PENABLECALLBACK      PETWENABLECALLBACK
  #else
    #define _mcgen_PENABLECALLBACK      PENABLECALLBACK
  #endif
#endif // _mcgen_PENABLECALLBACK

#if !defined(_mcgen_PASTE2)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE2(a, b) _mcgen_PASTE2_imp(a, b)
#define _mcgen_PASTE2_imp(a, b) a##b
#endif // _mcgen_PASTE2

#if !defined(_mcgen_PASTE3)
// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_PASTE3(a, b, c) _mcgen_PASTE3_imp(a, b, c)
#define _mcgen_PASTE3_imp(a, b, c) a##b##_##c
#endif // _mcgen_PASTE3

//
// Macro validation
//

// Validate MCGEN_EVENTREGISTER:

// Trigger an error if MCGEN_EVENTREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER);

// Trigger an error if MCGEN_EVENTREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTREGISTER)
    MCGEN_EVENTREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTREGISTER);

// Validate MCGEN_EVENTUNREGISTER:

// Trigger an error if MCGEN_EVENTUNREGISTER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER);

// Trigger an error if MCGEN_EVENTUNREGISTER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTUNREGISTER)
    MCGEN_EVENTUNREGISTER_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTUNREGISTER is defined as a function-like macro:
typedef void MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_MCGEN_EVENTUNREGISTER;
typedef int _mcgen_PASTE2(MCGEN_EVENTUNREGISTER_must_not_be_a_functionLike_macro_, MCGEN_EVENTUNREGISTER);

// Validate MCGEN_EVENTSETINFORMATION:

// Trigger an error if MCGEN_EVENTSETINFORMATION is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION);

// Trigger an error if MCGEN_EVENTSETINFORMATION is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTSETINFORMATION)
    MCGEN_EVENTSETINFORMATION_must_not_be_redefined_between_headers;

// Trigger an error if MCGEN_EVENTSETINFORMATION is defined as a function-like macro:
typedef void MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_MCGEN_EVENTSETINFORMATION;
typedef int _mcgen_PASTE2(MCGEN_EVENTSETINFORMATION_must_not_be_a_functionLike_macro_, MCGEN_EVENTSETINFORMATION);

// Validate MCGEN_EVENTWRITETRANSFER:

// Trigger an error if MCGEN_EVENTWRITETRANSFER is not an unqualified (simple) identifier:
struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER);

// Trigger an error if MCGEN_EVENTWRITETRANSFER is redefined:
typedef struct _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_definition_must_be_an_unqualified_identifier_, MCGEN_EVENTWRITETRANSFER)
    MCGEN_EVENTWRITETRANSFER_must_not_be_redefined_between_headers;;

// Trigger an error if MCGEN_EVENTWRITETRANSFER is defined as a function-like macro:
typedef void MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_MCGEN_EVENTWRITETRANSFER;
typedef int _mcgen_PASTE2(MCGEN_EVENTWRITETRANSFER_must_not_be_a_functionLike_macro_, MCGEN_EVENTWRITETRANSFER);

#ifndef McGenEventWrite_def
#define McGenEventWrite_def

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventWrite _mcgen_PASTE2(McGenEventWrite_, MCGEN_EVENTWRITETRANSFER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventWrite(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ LPCGUID ActivityId,
    _In_range_(1, 128) ULONG EventDataCount,
    _Pre_cap_(EventDataCount) EVENT_DATA_DESCRIPTOR* EventData
    )
{
    const USHORT UNALIGNED* Traits;

    // Some customized MCGEN_EVENTWRITETRANSFER macros might ignore ActivityId.
    UNREFERENCED_PARAMETER(ActivityId);

    Traits = (const USHORT UNALIGNED*)(UINT_PTR)Context->Logger;

    if (Traits == NULL) {
        EventData[0].Ptr = 0;
        EventData[0].Size = 0;
        EventData[0].Reserved = 0;
    } else {
        EventData[0].Ptr = (ULONG_PTR)Traits;
        EventData[0].Size = *Traits;
        EventData[0].Reserved = 2; // EVENT_DATA_DESCRIPTOR_TYPE_PROVIDER_METADATA
    }

    return MCGEN_EVENTWRITETRANSFER(
        Context->RegistrationHandle,
        Descriptor,
        ActivityId,
        NULL,
        EventDataCount,
        EventData);
}
#endif // McGenEventWrite_def

#if !defined(McGenEventRegisterUnregister)
#define McGenEventRegisterUnregister

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventRegister _mcgen_PASTE2(McGenEventRegister_, MCGEN_EVENTREGISTER)

#pragma warning(push)
#pragma warning(disable:6103)
// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventRegister(
    _In_ LPCGUID ProviderId,
    _In_opt_ _mcgen_PENABLECALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Inout_ PREGHANDLE RegHandle
    )
/*++

Routine Description:

    This function registers the provider with ETW.

Arguments:

    ProviderId - Provider ID to register with ETW.

    EnableCallback - Callback to be used.

    CallbackContext - Context for the callback.

    RegHandle - Pointer to registration handle.

Remarks:

    Should not be called if the provider is already registered (i.e. should not
    be called if *RegHandle != 0). Repeatedly registering a provider is a bug
    and may indicate a race condition. However, for compatibility with previous
    behavior, this function will return SUCCESS in this case.

--*/
{
    ULONG Error;

    if (*RegHandle != 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTREGISTER(ProviderId, EnableCallback, CallbackContext, RegHandle);
    }

    return Error;
}
#pragma warning(pop)

// This macro is for use by MC-generated code and should not be used directly.
#define McGenEventUnregister _mcgen_PASTE2(McGenEventUnregister_, MCGEN_EVENTUNREGISTER)

// This function is for use by MC-generated code and should not be used directly.
DECLSPEC_NOINLINE __inline
ULONG __stdcall
McGenEventUnregister(_Inout_ PREGHANDLE RegHandle)
/*++

Routine Description:

    Unregister from ETW and set *RegHandle = 0.

Arguments:

    RegHandle - the pointer to the provider registration handle

Remarks:

    If provider has not been registered (i.e. if *RegHandle == 0),
    return SUCCESS. It is safe to call McGenEventUnregister even if the
    call to McGenEventRegister returned an error.

--*/
{
    ULONG Error;

    if(*RegHandle == 0)
    {
        Error = 0; // ERROR_SUCCESS
    }
    else
    {
        Error = MCGEN_EVENTUNREGISTER(*RegHandle);
        *RegHandle = (REGHANDLE)0;
    }

    return Error;
}

#endif // McGenEventRegisterUnregister

#ifndef _mcgen_EVENT_BIT_SET
  #if defined(_M_IX86) || defined(_M_X64)
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((((const unsigned char*)EnableBits)[BitPosition >> 3] & (1u << (BitPosition & 7))) != 0)
  #else // CPU type
    // This macro is for use by MC-generated code and should not be used directly.
    #define _mcgen_EVENT_BIT_SET(EnableBits, BitPosition) ((EnableBits[BitPosition >> 5] & (1u << (BitPosition & 31))) != 0)
  #endif // CPU type
#endif // _mcgen_EVENT_BIT_SET

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Provider "PerfectHash" event count 12
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Provider GUID = d0b3028e-70a7-410f-af7e-4d495b4a3c8b
EXTERN_C __declspec(selectany) const GUID PerfectHashEvents = {0xd0b3028e, 0x70a7, 0x410f, {0xaf, 0x7e, 0x4d, 0x49, 0x5b, 0x4a, 0x3c, 0x8b}};

#ifndef PerfectHashEvents_Traits
#define PerfectHashEvents_Traits NULL
#endif // PerfectHashEvents_Traits

//
// Channel
//
#define PerfectHashAnalytic 0x10

//
// Tasks
//
#define PerfectHashEvents_TASK_AddKeys 0x1
#define PerfectHashEvents_TASK_HashKeys 0x2
#define PerfectHashEvents_TASK_AddHashedKeys 0x3
#define PerfectHashEvents_TASK_FoundNewBestGraph 0x4
#define PerfectHashEvents_TASK_FoundEqualBestGraph 0x5
#define PerfectHashEvents_TASK_FoundGraph 0x6
#define PerfectHashEvents_TASK_Assign 0x7
#define PerfectHashEvents_TASK_GenerateRandomBytes 0x8
#define PerfectHashEvents_TASK_IsAcyclic 0x9

//
// Keyword
//
#define PH_ETW_GRAPH_HASH 0x1
#define PH_ETW_GRAPH_FOUND_BEST 0x2
#define PH_ETW_GRAPH_FOUND_EQUAL_BEST 0x4
#define PH_ETW_GRAPH_FOUND 0x8
#define PH_ETW_GRAPH_ASSIGN 0x10
#define PH_ETW_RTL_RANDOM 0x20
#define PH_ETW_GRAPH_IS_ACYCLIC 0x40

//
// Event Descriptors
//
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphAddKeysEvent = {0x0, 0x1, 0x10, 0x4, 0x0, 0x1, 0x8000000000000001};
#define GraphAddKeysEvent_value 0x0
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphHashKeysEvent = {0x1, 0x1, 0x10, 0x4, 0x0, 0x2, 0x8000000000000001};
#define GraphHashKeysEvent_value 0x1
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphAddHashedKeysEvent = {0x2, 0x1, 0x10, 0x4, 0x0, 0x3, 0x8000000000000001};
#define GraphAddHashedKeysEvent_value 0x2
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphFoundNewBestEvent = {0x3, 0x0, 0x10, 0x4, 0x0, 0x4, 0x8000000000000002};
#define GraphFoundNewBestEvent_value 0x3
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphFoundEqualBestEvent = {0x4, 0x0, 0x10, 0x4, 0x0, 0x5, 0x8000000000000004};
#define GraphFoundEqualBestEvent_value 0x4
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphFoundEvent = {0x5, 0x0, 0x10, 0x4, 0x0, 0x6, 0x8000000000000008};
#define GraphFoundEvent_value 0x5
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphAssignStartEvent = {0x6, 0x0, 0x10, 0x4, 0x1, 0x7, 0x8000000000000010};
#define GraphAssignStartEvent_value 0x6
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphAssignStopEvent = {0x7, 0x0, 0x10, 0x4, 0x2, 0x7, 0x8000000000000010};
#define GraphAssignStopEvent_value 0x7
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RtlGenerateRandomBytesStartEvent = {0x8, 0x0, 0x10, 0x4, 0x1, 0x8, 0x8000000000000020};
#define RtlGenerateRandomBytesStartEvent_value 0x8
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR RtlGenerateRandomBytesStopEvent = {0x9, 0x0, 0x10, 0x4, 0x2, 0x8, 0x8000000000000020};
#define RtlGenerateRandomBytesStopEvent_value 0x9
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphAssignResultEvent = {0xa, 0x0, 0x10, 0x4, 0x0, 0x7, 0x8000000000000010};
#define GraphAssignResultEvent_value 0xa
EXTERN_C __declspec(selectany) const EVENT_DESCRIPTOR GraphIsAcyclicEvent = {0xb, 0x0, 0x10, 0x4, 0x0, 0x9, 0x8000000000000040};
#define GraphIsAcyclicEvent_value 0xb

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Event Enablement Bits
// These variables are for use by MC-generated code and should not be used directly.
//
EXTERN_C __declspec(selectany) DECLSPEC_CACHEALIGN ULONG PerfectHashEnableBits[1];
EXTERN_C __declspec(selectany) const ULONGLONG PerfectHashKeywords[7] = {0x8000000000000001, 0x8000000000000002, 0x8000000000000004, 0x8000000000000008, 0x8000000000000010, 0x8000000000000020, 0x8000000000000040};
EXTERN_C __declspec(selectany) const unsigned char PerfectHashLevels[7] = {4, 4, 4, 4, 4, 4, 4};

//
// Provider context
//
EXTERN_C __declspec(selectany) MCGEN_TRACE_CONTEXT PerfectHashEvents_Context = {0, (ULONG_PTR)PerfectHashEvents_Traits, 0, 0, 0, 0, 0, 0, 7, PerfectHashEnableBits, PerfectHashKeywords, PerfectHashLevels};

//
// Provider REGHANDLE
//
#define PerfectHashHandle (PerfectHashEvents_Context.RegistrationHandle)

//
// This macro is set to 1, indicating that the EventWrite[Name] macros
// have an Activity parameter. This is controlled by the -km and -um options.
//
#define PerfectHashEvents_EventWriteActivity 1

//
// Register with ETW using the control GUID specified in the manifest.
// Invoke this macro during module initialization (i.e. program startup,
// DLL process attach, or driver load) to initialize the provider.
// Note that if this function returns an error, the error means that
// will not work, but no action needs to be taken -- even if EventRegister
// returns an error, it is generally safe to use EventWrite and
// EventUnregister macros (they will be no-ops if EventRegister failed).
//
#ifndef EventRegisterPerfectHash
#define EventRegisterPerfectHash() McGenEventRegister(&PerfectHashEvents, McGenControlCallbackV2, &PerfectHashEvents_Context, &PerfectHashHandle)
#endif

//
// Register with ETW using a specific control GUID (i.e. a GUID other than what
// is specified in the manifest). Advanced scenarios only.
//
#ifndef EventRegisterByGuidPerfectHash
#define EventRegisterByGuidPerfectHash(Guid) McGenEventRegister(&(Guid), McGenControlCallbackV2, &PerfectHashEvents_Context, &PerfectHashHandle)
#endif

//
// Unregister with ETW and close the provider.
// Invoke this macro during module shutdown (i.e. program exit, DLL process
// detach, or driver unload) to unregister the provider.
// Note that you MUST call EventUnregister before DLL or driver unload
// (not optional): failure to unregister a provider before DLL or driver unload
// will result in crashes.
//
#ifndef EventUnregisterPerfectHash
#define EventUnregisterPerfectHash() McGenEventUnregister(&PerfectHashHandle)
#endif

//
// MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION macro:
// Define this macro to enable support for caller-allocated provider context.
//
#ifdef MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Advanced scenarios: Caller-allocated provider context.
// Use when multiple differently-configured provider handles are needed,
// e.g. for container-aware drivers, one context per container.
//
// Usage:
//
// - Caller enables the feature before including this header, e.g.
//   #define MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION 1
// - Caller allocates memory, e.g. pContext = malloc(sizeof(McGenContext_PerfectHash));
// - Caller registers the provider, e.g. EventRegisterPerfectHash_ForContext(pContext);
// - Caller writes events, e.g. EventWriteMyEvent_ForContext(pContext, ...);
// - Caller unregisters, e.g. EventUnregisterPerfectHash_ForContext(pContext);
// - Caller frees memory, e.g. free(pContext);
//

typedef struct tagMcGenContext_PerfectHash {
    // The fields of this structure are subject to change and should
    // not be accessed directly. To access the provider's REGHANDLE,
    // use PerfectHashHandle_ForContext(pContext).
    MCGEN_TRACE_CONTEXT Context;
    ULONG EnableBits[1];
} McGenContext_PerfectHash;

#define EventRegisterPerfectHash_ForContext(pContext)             _mcgen_PASTE2(_mcgen_RegisterForContext_PerfectHash_, MCGEN_EVENTREGISTER)(&PerfectHashEvents, pContext)
#define EventRegisterByGuidPerfectHash_ForContext(Guid, pContext) _mcgen_PASTE2(_mcgen_RegisterForContext_PerfectHash_, MCGEN_EVENTREGISTER)(&(Guid), pContext)
#define EventUnregisterPerfectHash_ForContext(pContext)           McGenEventUnregister(&(pContext)->Context.RegistrationHandle)

//
// Provider REGHANDLE for caller-allocated context.
//
#define PerfectHashHandle_ForContext(pContext) ((pContext)->Context.RegistrationHandle)

// This function is for use by MC-generated code and should not be used directly.
// Initialize and register the caller-allocated context.
__inline
ULONG __stdcall
_mcgen_PASTE2(_mcgen_RegisterForContext_PerfectHash_, MCGEN_EVENTREGISTER)(
    _In_ LPCGUID pProviderId,
    _Out_ McGenContext_PerfectHash* pContext)
{
    RtlZeroMemory(pContext, sizeof(*pContext));
    pContext->Context.Logger = (ULONG_PTR)PerfectHashEvents_Traits;
    pContext->Context.EnableBitsCount = 7;
    pContext->Context.EnableBitMask = pContext->EnableBits;
    pContext->Context.EnableKeyWords = PerfectHashKeywords;
    pContext->Context.EnableLevel = PerfectHashLevels;
    return McGenEventRegister(
        pProviderId,
        McGenControlCallbackV2,
        &pContext->Context,
        &pContext->Context.RegistrationHandle);
}

// This function is for use by MC-generated code and should not be used directly.
// Trigger a compile error if called with the wrong parameter type.
FORCEINLINE
_Ret_ McGenContext_PerfectHash*
_mcgen_CheckContextType_PerfectHash(_In_ McGenContext_PerfectHash* pContext)
{
    return pContext;
}

#endif // MCGEN_ENABLE_FORCONTEXT_CODE_GENERATION

//
// Enablement check macro for event "GraphAddKeysEvent"
//
#define EventEnabledGraphAddKeysEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 0)
#define EventEnabledGraphAddKeysEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 0)

//
// Event write macros for event "GraphAddKeysEvent"
//
#define EventWriteGraphAddKeysEvent(Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        MCGEN_EVENT_ENABLED(GraphAddKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAddKeysEvent(&PerfectHashEvents_Context, &GraphAddKeysEvent, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) : 0
#define EventWriteGraphAddKeysEvent_AssumeEnabled(KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        _mcgen_TEMPLATE_FOR_GraphAddKeysEvent(&PerfectHashEvents_Context, &GraphAddKeysEvent, NULL, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8)
#define EventWriteGraphAddKeysEvent_ForContext(pContext, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphAddKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAddKeysEvent(&(pContext)->Context, &GraphAddKeysEvent, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) : 0
#define EventWriteGraphAddKeysEvent_ForContextAssumeEnabled(pContext, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        _mcgen_TEMPLATE_FOR_GraphAddKeysEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphAddKeysEvent, NULL, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphAddKeysEvent _mcgen_PASTE2(McTemplateK0zqqqqiiqqqqqqqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphHashKeysEvent"
//
#define EventEnabledGraphHashKeysEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 0)
#define EventEnabledGraphHashKeysEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 0)

//
// Event write macros for event "GraphHashKeysEvent"
//
#define EventWriteGraphHashKeysEvent(Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        MCGEN_EVENT_ENABLED(GraphHashKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphHashKeysEvent(&PerfectHashEvents_Context, &GraphHashKeysEvent, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) : 0
#define EventWriteGraphHashKeysEvent_AssumeEnabled(KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        _mcgen_TEMPLATE_FOR_GraphHashKeysEvent(&PerfectHashEvents_Context, &GraphHashKeysEvent, NULL, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8)
#define EventWriteGraphHashKeysEvent_ForContext(pContext, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphHashKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphHashKeysEvent(&(pContext)->Context, &GraphHashKeysEvent, Activity, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) : 0
#define EventWriteGraphHashKeysEvent_ForContextAssumeEnabled(pContext, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8) \
        _mcgen_TEMPLATE_FOR_GraphHashKeysEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphHashKeysEvent, NULL, KeysFileName, KeysProcessed, NumberOfKeys, LastKey, Result, Cycles, Microseconds, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphHashKeysEvent _mcgen_PASTE2(McTemplateK0zqqqqiiqqqqqqqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphAddHashedKeysEvent"
//
#define EventEnabledGraphAddHashedKeysEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 0)
#define EventEnabledGraphAddHashedKeysEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 0)

//
// Event write macros for event "GraphAddHashedKeysEvent"
//
#define EventWriteGraphAddHashedKeysEvent(Activity, KeysFileName, NumberOfKeys, Cycles, Microseconds) \
        MCGEN_EVENT_ENABLED(GraphAddHashedKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAddHashedKeysEvent(&PerfectHashEvents_Context, &GraphAddHashedKeysEvent, Activity, KeysFileName, NumberOfKeys, Cycles, Microseconds) : 0
#define EventWriteGraphAddHashedKeysEvent_AssumeEnabled(KeysFileName, NumberOfKeys, Cycles, Microseconds) \
        _mcgen_TEMPLATE_FOR_GraphAddHashedKeysEvent(&PerfectHashEvents_Context, &GraphAddHashedKeysEvent, NULL, KeysFileName, NumberOfKeys, Cycles, Microseconds)
#define EventWriteGraphAddHashedKeysEvent_ForContext(pContext, Activity, KeysFileName, NumberOfKeys, Cycles, Microseconds) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphAddHashedKeysEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAddHashedKeysEvent(&(pContext)->Context, &GraphAddHashedKeysEvent, Activity, KeysFileName, NumberOfKeys, Cycles, Microseconds) : 0
#define EventWriteGraphAddHashedKeysEvent_ForContextAssumeEnabled(pContext, KeysFileName, NumberOfKeys, Cycles, Microseconds) \
        _mcgen_TEMPLATE_FOR_GraphAddHashedKeysEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphAddHashedKeysEvent, NULL, KeysFileName, NumberOfKeys, Cycles, Microseconds)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphAddHashedKeysEvent _mcgen_PASTE2(McTemplateK0zqii_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphFoundNewBestEvent"
//
#define EventEnabledGraphFoundNewBestEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 1)
#define EventEnabledGraphFoundNewBestEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 1)

//
// Event write macros for event "GraphFoundNewBestEvent"
//
#define EventWriteGraphFoundNewBestEvent(Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED(GraphFoundNewBestEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundNewBestEvent(&PerfectHashEvents_Context, &GraphFoundNewBestEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundNewBestEvent_AssumeEnabled(KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundNewBestEvent(&PerfectHashEvents_Context, &GraphFoundNewBestEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)
#define EventWriteGraphFoundNewBestEvent_ForContext(pContext, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphFoundNewBestEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundNewBestEvent(&(pContext)->Context, &GraphFoundNewBestEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundNewBestEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundNewBestEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphFoundNewBestEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphFoundNewBestEvent _mcgen_PASTE2(McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphFoundEqualBestEvent"
//
#define EventEnabledGraphFoundEqualBestEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 2)
#define EventEnabledGraphFoundEqualBestEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 2)

//
// Event write macros for event "GraphFoundEqualBestEvent"
//
#define EventWriteGraphFoundEqualBestEvent(Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED(GraphFoundEqualBestEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundEqualBestEvent(&PerfectHashEvents_Context, &GraphFoundEqualBestEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundEqualBestEvent_AssumeEnabled(KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundEqualBestEvent(&PerfectHashEvents_Context, &GraphFoundEqualBestEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)
#define EventWriteGraphFoundEqualBestEvent_ForContext(pContext, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphFoundEqualBestEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundEqualBestEvent(&(pContext)->Context, &GraphFoundEqualBestEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundEqualBestEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundEqualBestEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphFoundEqualBestEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphFoundEqualBestEvent _mcgen_PASTE2(McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphFoundEvent"
//
#define EventEnabledGraphFoundEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 3)
#define EventEnabledGraphFoundEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 3)

//
// Event write macros for event "GraphFoundEvent"
//
#define EventWriteGraphFoundEvent(Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED(GraphFoundEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundEvent(&PerfectHashEvents_Context, &GraphFoundEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundEvent_AssumeEnabled(KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundEvent(&PerfectHashEvents_Context, &GraphFoundEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)
#define EventWriteGraphFoundEvent_ForContext(pContext, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphFoundEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphFoundEvent(&(pContext)->Context, &GraphFoundEvent, Activity, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) : 0
#define EventWriteGraphFoundEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank) \
        _mcgen_TEMPLATE_FOR_GraphFoundEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphFoundEvent, NULL, KeysFileName, Attempt, SolutionNumber, ElapsedMilliseconds, CoverageType, CoverageValue, CoverageValueAsDouble, StopGraphSolving, IsBest, IsEqual, IsCoverageValueDouble, EqualCount, TotalNumberOfPages, TotalNumberOfLargePages, TotalNumberOfCacheLines, NumberOfUsedPages, NumberOfUsedLargePages, NumberOfUsedCacheLines, NumberOfEmptyPages, NumberOfEmptyLargePages, NumberOfEmptyCacheLines, FirstPageUsed, FirstLargePageUsed, FirstCacheLineUsed, LastPageUsed, LastLargePageUsed, LastCacheLineUsed, TotalNumberOfAssigned, NumberOfKeysWithVerticesMappingToSamePage, NumberOfKeysWithVerticesMappingToSameLargePage, NumberOfKeysWithVerticesMappingToSameCacheLine, MaxGraphTraversalDepth, TotalGraphTraversals, Seed1, Seed2, Seed3, Seed4, Seed5, Seed6, Seed7, Seed8, NumberOfAssignedPerCacheLineCounts_0, NumberOfAssignedPerCacheLineCounts_1, NumberOfAssignedPerCacheLineCounts_2, NumberOfAssignedPerCacheLineCounts_3, NumberOfAssignedPerCacheLineCounts_4, NumberOfAssignedPerCacheLineCounts_5, NumberOfAssignedPerCacheLineCounts_6, NumberOfAssignedPerCacheLineCounts_7, NumberOfAssignedPerCacheLineCounts_8, NumberOfAssignedPerCacheLineCounts_9, NumberOfAssignedPerCacheLineCounts_10, NumberOfAssignedPerCacheLineCounts_11, NumberOfAssignedPerCacheLineCounts_12, NumberOfAssignedPerCacheLineCounts_13, NumberOfAssignedPerCacheLineCounts_14, NumberOfAssignedPerCacheLineCounts_15, NumberOfAssignedPerCacheLineCounts_16, Slope, Intercept, CorrelationCoefficient, Score, Rank)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphFoundEvent _mcgen_PASTE2(McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphAssignStartEvent"
//
#define EventEnabledGraphAssignStartEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 4)
#define EventEnabledGraphAssignStartEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 4)

//
// Event write macros for event "GraphAssignStartEvent"
//
#define EventWriteGraphAssignStartEvent(Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) \
        MCGEN_EVENT_ENABLED(GraphAssignStartEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignStartEvent(&PerfectHashEvents_Context, &GraphAssignStartEvent, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) : 0
#define EventWriteGraphAssignStartEvent_AssumeEnabled(KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) \
        _mcgen_TEMPLATE_FOR_GraphAssignStartEvent(&PerfectHashEvents_Context, &GraphAssignStartEvent, NULL, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices)
#define EventWriteGraphAssignStartEvent_ForContext(pContext, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphAssignStartEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignStartEvent(&(pContext)->Context, &GraphAssignStartEvent, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) : 0
#define EventWriteGraphAssignStartEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices) \
        _mcgen_TEMPLATE_FOR_GraphAssignStartEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphAssignStartEvent, NULL, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphAssignStartEvent _mcgen_PASTE2(McTemplateK0ziqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphAssignStopEvent"
//
#define EventEnabledGraphAssignStopEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 4)
#define EventEnabledGraphAssignStopEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 4)

//
// Event write macros for event "GraphAssignStopEvent"
//
#define EventWriteGraphAssignStopEvent(Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) \
        MCGEN_EVENT_ENABLED(GraphAssignStopEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignStopEvent(&PerfectHashEvents_Context, &GraphAssignStopEvent, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) : 0
#define EventWriteGraphAssignStopEvent_AssumeEnabled(KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) \
        _mcgen_TEMPLATE_FOR_GraphAssignStopEvent(&PerfectHashEvents_Context, &GraphAssignStopEvent, NULL, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals)
#define EventWriteGraphAssignStopEvent_ForContext(pContext, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphAssignStopEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignStopEvent(&(pContext)->Context, &GraphAssignStopEvent, Activity, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) : 0
#define EventWriteGraphAssignStopEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals) \
        _mcgen_TEMPLATE_FOR_GraphAssignStopEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphAssignStopEvent, NULL, KeysFileName, Attempt, NumberOfKeys, NumberOfVertices, NumberOfEmptyVertices, MaxTraversalDepth, TotalTraversals)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphAssignStopEvent _mcgen_PASTE2(McTemplateK0ziqqqqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RtlGenerateRandomBytesStartEvent"
//
#define EventEnabledRtlGenerateRandomBytesStartEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 5)
#define EventEnabledRtlGenerateRandomBytesStartEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 5)

//
// Event write macros for event "RtlGenerateRandomBytesStartEvent"
//
#define EventWriteRtlGenerateRandomBytesStartEvent(Activity, BytesRequested) \
        MCGEN_EVENT_ENABLED(RtlGenerateRandomBytesStartEvent) \
        ? _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStartEvent(&PerfectHashEvents_Context, &RtlGenerateRandomBytesStartEvent, Activity, BytesRequested) : 0
#define EventWriteRtlGenerateRandomBytesStartEvent_AssumeEnabled(BytesRequested) \
        _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStartEvent(&PerfectHashEvents_Context, &RtlGenerateRandomBytesStartEvent, NULL, BytesRequested)
#define EventWriteRtlGenerateRandomBytesStartEvent_ForContext(pContext, Activity, BytesRequested) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RtlGenerateRandomBytesStartEvent) \
        ? _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStartEvent(&(pContext)->Context, &RtlGenerateRandomBytesStartEvent, Activity, BytesRequested) : 0
#define EventWriteRtlGenerateRandomBytesStartEvent_ForContextAssumeEnabled(pContext, BytesRequested) \
        _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStartEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &RtlGenerateRandomBytesStartEvent, NULL, BytesRequested)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStartEvent _mcgen_PASTE2(McTemplateK0q_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "RtlGenerateRandomBytesStopEvent"
//
#define EventEnabledRtlGenerateRandomBytesStopEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 5)
#define EventEnabledRtlGenerateRandomBytesStopEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 5)

//
// Event write macros for event "RtlGenerateRandomBytesStopEvent"
//
#define EventWriteRtlGenerateRandomBytesStopEvent(Activity, BytesRequested, Result) \
        MCGEN_EVENT_ENABLED(RtlGenerateRandomBytesStopEvent) \
        ? _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStopEvent(&PerfectHashEvents_Context, &RtlGenerateRandomBytesStopEvent, Activity, BytesRequested, Result) : 0
#define EventWriteRtlGenerateRandomBytesStopEvent_AssumeEnabled(BytesRequested, Result) \
        _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStopEvent(&PerfectHashEvents_Context, &RtlGenerateRandomBytesStopEvent, NULL, BytesRequested, Result)
#define EventWriteRtlGenerateRandomBytesStopEvent_ForContext(pContext, Activity, BytesRequested, Result) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, RtlGenerateRandomBytesStopEvent) \
        ? _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStopEvent(&(pContext)->Context, &RtlGenerateRandomBytesStopEvent, Activity, BytesRequested, Result) : 0
#define EventWriteRtlGenerateRandomBytesStopEvent_ForContextAssumeEnabled(pContext, BytesRequested, Result) \
        _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStopEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &RtlGenerateRandomBytesStopEvent, NULL, BytesRequested, Result)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_RtlGenerateRandomBytesStopEvent _mcgen_PASTE2(McTemplateK0qq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphAssignResultEvent"
//
#define EventEnabledGraphAssignResultEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 4)
#define EventEnabledGraphAssignResultEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 4)

//
// Event write macros for event "GraphAssignResultEvent"
//
#define EventWriteGraphAssignResultEvent(Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) \
        MCGEN_EVENT_ENABLED(GraphAssignResultEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignResultEvent(&PerfectHashEvents_Context, &GraphAssignResultEvent, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) : 0
#define EventWriteGraphAssignResultEvent_AssumeEnabled(KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) \
        _mcgen_TEMPLATE_FOR_GraphAssignResultEvent(&PerfectHashEvents_Context, &GraphAssignResultEvent, NULL, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices)
#define EventWriteGraphAssignResultEvent_ForContext(pContext, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphAssignResultEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphAssignResultEvent(&(pContext)->Context, &GraphAssignResultEvent, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) : 0
#define EventWriteGraphAssignResultEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices) \
        _mcgen_TEMPLATE_FOR_GraphAssignResultEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphAssignResultEvent, NULL, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphAssignResultEvent _mcgen_PASTE2(McTemplateK0ziqiiqq_, MCGEN_EVENTWRITETRANSFER)

//
// Enablement check macro for event "GraphIsAcyclicEvent"
//
#define EventEnabledGraphIsAcyclicEvent() _mcgen_EVENT_BIT_SET(PerfectHashEnableBits, 6)
#define EventEnabledGraphIsAcyclicEvent_ForContext(pContext) _mcgen_EVENT_BIT_SET(_mcgen_CheckContextType_PerfectHash(pContext)->EnableBits, 6)

//
// Event write macros for event "GraphIsAcyclicEvent"
//
#define EventWriteGraphIsAcyclicEvent(Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) \
        MCGEN_EVENT_ENABLED(GraphIsAcyclicEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphIsAcyclicEvent(&PerfectHashEvents_Context, &GraphIsAcyclicEvent, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) : 0
#define EventWriteGraphIsAcyclicEvent_AssumeEnabled(KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) \
        _mcgen_TEMPLATE_FOR_GraphIsAcyclicEvent(&PerfectHashEvents_Context, &GraphIsAcyclicEvent, NULL, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic)
#define EventWriteGraphIsAcyclicEvent_ForContext(pContext, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) \
        MCGEN_EVENT_ENABLED_FORCONTEXT(pContext, GraphIsAcyclicEvent) \
        ? _mcgen_TEMPLATE_FOR_GraphIsAcyclicEvent(&(pContext)->Context, &GraphIsAcyclicEvent, Activity, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) : 0
#define EventWriteGraphIsAcyclicEvent_ForContextAssumeEnabled(pContext, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic) \
        _mcgen_TEMPLATE_FOR_GraphIsAcyclicEvent(&_mcgen_CheckContextType_PerfectHash(pContext)->Context, &GraphIsAcyclicEvent, NULL, KeysFileName, Attempt, FunctionVersion, Cycles, Microseconds, NumberOfKeys, NumberOfVertices, IsAcyclic)

// This macro is for use by MC-generated code and should not be used directly.
#define _mcgen_TEMPLATE_FOR_GraphIsAcyclicEvent _mcgen_PASTE2(McTemplateK0ziqiiqqt_, MCGEN_EVENTWRITETRANSFER)

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// MCGEN_DISABLE_PROVIDER_CODE_GENERATION macro:
// Define this macro to have the compiler skip the generated functions in this
// header.
//
#ifndef MCGEN_DISABLE_PROVIDER_CODE_GENERATION

//
// Template Functions
//

//
// Function for template "GenerateRandomBytesStartTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0q_def
#define McTemplateK0q_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0q_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_ const unsigned int  _Arg0
    )
{
#define McTemplateK0q_ARGCOUNT 1

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0q_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0q_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0q_def

//
// Function for template "GenerateRandomBytesStopTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0qq_def
#define McTemplateK0qq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0qq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_ const unsigned int  _Arg0,
    _In_ const unsigned int  _Arg1
    )
{
#define McTemplateK0qq_ARGCOUNT 2

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0qq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],&_Arg0, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0qq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0qq_def

//
// Function for template "GraphAssignResultTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0ziqiiqq_def
#define McTemplateK0ziqiiqq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0ziqiiqq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned int  _Arg6
    )
{
#define McTemplateK0ziqiiqq_ARGCOUNT 7

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0ziqiiqq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0ziqiiqq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0ziqiiqq_def

//
// Function for template "GraphIsAcyclicTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0ziqiiqqt_def
#define McTemplateK0ziqiiqqt_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0ziqiiqqt_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const signed __int64  _Arg3,
    _In_ const signed __int64  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned int  _Arg6,
    _In_ const signed int  _Arg7
    )
{
#define McTemplateK0ziqiiqqt_ARGCOUNT 8

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0ziqiiqqt_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const signed int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0ziqiiqqt_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0ziqiiqqt_def

//
// Function for template "GraphAssignStartTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0ziqq_def
#define McTemplateK0ziqq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0ziqq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3
    )
{
#define McTemplateK0ziqq_ARGCOUNT 4

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0ziqq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0ziqq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0ziqq_def

//
// Function for template "GraphAssignStopTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0ziqqqqq_def
#define McTemplateK0ziqqqqq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0ziqqqqq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const unsigned int  _Arg6
    )
{
#define McTemplateK0ziqqqqq_ARGCOUNT 7

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0ziqqqqq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0ziqqqqq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0ziqqqqq_def

//
// Function for template "GraphFoundTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_def
#define McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const signed __int64  _Arg1,
    _In_ const unsigned __int64  _Arg2,
    _In_ const unsigned __int64  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const unsigned int  _Arg5,
    _In_ const double  _Arg6,
    _In_ const signed int  _Arg7,
    _In_ const signed int  _Arg8,
    _In_ const signed int  _Arg9,
    _In_ const signed int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_ const unsigned int  _Arg12,
    _In_ const unsigned int  _Arg13,
    _In_ const unsigned int  _Arg14,
    _In_ const unsigned int  _Arg15,
    _In_ const unsigned int  _Arg16,
    _In_ const unsigned int  _Arg17,
    _In_ const unsigned int  _Arg18,
    _In_ const unsigned int  _Arg19,
    _In_ const unsigned int  _Arg20,
    _In_ const unsigned int  _Arg21,
    _In_ const unsigned int  _Arg22,
    _In_ const unsigned int  _Arg23,
    _In_ const unsigned int  _Arg24,
    _In_ const unsigned int  _Arg25,
    _In_ const unsigned int  _Arg26,
    _In_ const unsigned int  _Arg27,
    _In_ const unsigned int  _Arg28,
    _In_ const unsigned int  _Arg29,
    _In_ const unsigned int  _Arg30,
    _In_ const unsigned int  _Arg31,
    _In_ const unsigned int  _Arg32,
    _In_ const unsigned int  _Arg33,
    _In_ const unsigned int  _Arg34,
    _In_ const unsigned int  _Arg35,
    _In_ const unsigned int  _Arg36,
    _In_ const unsigned int  _Arg37,
    _In_ const unsigned int  _Arg38,
    _In_ const unsigned int  _Arg39,
    _In_ const unsigned int  _Arg40,
    _In_ const unsigned int  _Arg41,
    _In_ const unsigned int  _Arg42,
    _In_ const unsigned int  _Arg43,
    _In_ const unsigned int  _Arg44,
    _In_ const unsigned int  _Arg45,
    _In_ const unsigned int  _Arg46,
    _In_ const unsigned int  _Arg47,
    _In_ const unsigned int  _Arg48,
    _In_ const unsigned int  _Arg49,
    _In_ const unsigned int  _Arg50,
    _In_ const unsigned int  _Arg51,
    _In_ const unsigned int  _Arg52,
    _In_ const unsigned int  _Arg53,
    _In_ const unsigned int  _Arg54,
    _In_ const unsigned int  _Arg55,
    _In_ const unsigned int  _Arg56,
    _In_ const unsigned int  _Arg57,
    _In_ const double  _Arg58,
    _In_ const double  _Arg59,
    _In_ const double  _Arg60,
    _In_ const unsigned __int64  _Arg61,
    _In_ const double  _Arg62
    )
{
#define McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_ARGCOUNT 63

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const double)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const signed int)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[16],&_Arg15, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[17],&_Arg16, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[18],&_Arg17, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[19],&_Arg18, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[20],&_Arg19, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[21],&_Arg20, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[22],&_Arg21, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[23],&_Arg22, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[24],&_Arg23, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[25],&_Arg24, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[26],&_Arg25, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[27],&_Arg26, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[28],&_Arg27, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[29],&_Arg28, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[30],&_Arg29, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[31],&_Arg30, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[32],&_Arg31, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[33],&_Arg32, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[34],&_Arg33, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[35],&_Arg34, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[36],&_Arg35, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[37],&_Arg36, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[38],&_Arg37, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[39],&_Arg38, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[40],&_Arg39, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[41],&_Arg40, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[42],&_Arg41, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[43],&_Arg42, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[44],&_Arg43, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[45],&_Arg44, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[46],&_Arg45, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[47],&_Arg46, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[48],&_Arg47, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[49],&_Arg48, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[50],&_Arg49, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[51],&_Arg50, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[52],&_Arg51, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[53],&_Arg52, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[54],&_Arg53, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[55],&_Arg54, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[56],&_Arg55, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[57],&_Arg56, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[58],&_Arg57, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[59],&_Arg58, sizeof(const double)  );

    EventDataDescCreate(&EventData[60],&_Arg59, sizeof(const double)  );

    EventDataDescCreate(&EventData[61],&_Arg60, sizeof(const double)  );

    EventDataDescCreate(&EventData[62],&_Arg61, sizeof(const unsigned __int64)  );

    EventDataDescCreate(&EventData[63],&_Arg62, sizeof(const double)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0zixxqqgttttqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqgggxg_def

//
// Function for template "GraphAddHashedKeysTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0zqii_def
#define McTemplateK0zqii_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0zqii_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const signed __int64  _Arg2,
    _In_ const signed __int64  _Arg3
    )
{
#define McTemplateK0zqii_ARGCOUNT 4

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0zqii_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const signed __int64)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0zqii_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0zqii_def

//
// Function for template "GraphAddKeysTemplate" (and possibly others).
// This function is for use by MC-generated code and should not be used directly.
//
#ifndef McTemplateK0zqqqqiiqqqqqqqq_def
#define McTemplateK0zqqqqiiqqqqqqqq_def
ETW_INLINE
ULONG
_mcgen_PASTE2(McTemplateK0zqqqqiiqqqqqqqq_, MCGEN_EVENTWRITETRANSFER)(
    _In_ PMCGEN_TRACE_CONTEXT Context,
    _In_ PCEVENT_DESCRIPTOR Descriptor,
    _In_opt_ const GUID* Activity,
    _In_opt_ PCWSTR  _Arg0,
    _In_ const unsigned int  _Arg1,
    _In_ const unsigned int  _Arg2,
    _In_ const unsigned int  _Arg3,
    _In_ const unsigned int  _Arg4,
    _In_ const signed __int64  _Arg5,
    _In_ const signed __int64  _Arg6,
    _In_ const unsigned int  _Arg7,
    _In_ const unsigned int  _Arg8,
    _In_ const unsigned int  _Arg9,
    _In_ const unsigned int  _Arg10,
    _In_ const unsigned int  _Arg11,
    _In_ const unsigned int  _Arg12,
    _In_ const unsigned int  _Arg13,
    _In_ const unsigned int  _Arg14
    )
{
#define McTemplateK0zqqqqiiqqqqqqqq_ARGCOUNT 15

    EVENT_DATA_DESCRIPTOR EventData[McTemplateK0zqqqqiiqqqqqqqq_ARGCOUNT + 1];

    EventDataDescCreate(&EventData[1],
                        (_Arg0 != NULL) ? _Arg0 : L"NULL",
                        (_Arg0 != NULL) ? (ULONG)((wcslen(_Arg0) + 1) * sizeof(WCHAR)) : (ULONG)sizeof(L"NULL"));

    EventDataDescCreate(&EventData[2],&_Arg1, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[3],&_Arg2, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[4],&_Arg3, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[5],&_Arg4, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[6],&_Arg5, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[7],&_Arg6, sizeof(const signed __int64)  );

    EventDataDescCreate(&EventData[8],&_Arg7, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[9],&_Arg8, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[10],&_Arg9, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[11],&_Arg10, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[12],&_Arg11, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[13],&_Arg12, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[14],&_Arg13, sizeof(const unsigned int)  );

    EventDataDescCreate(&EventData[15],&_Arg14, sizeof(const unsigned int)  );

    return McGenEventWrite(Context, Descriptor, Activity, McTemplateK0zqqqqiiqqqqqqqq_ARGCOUNT + 1, EventData);
}
#endif // McTemplateK0zqqqqiiqqqqqqqq_def

#endif // MCGEN_DISABLE_PROVIDER_CODE_GENERATION

#if defined(__cplusplus)
}
#endif

#define MSG_opcode_Info                      0x30000000L
#define MSG_level_Informational              0x50000004L
#define MSG_PerfectHash_event_3_message      0xB0000003L
#define MSG_PerfectHash_event_4_message      0xB0000004L
#define MSG_PerfectHash_event_5_message      0xB0000005L
#define MSG_PerfectHash_event_6_message      0xB0000006L
#define MSG_PerfectHash_event_7_message      0xB0000007L
#define MSG_PerfectHash_event_8_message      0xB0000008L
#define MSG_PerfectHash_event_9_message      0xB0000009L
#define MSG_PerfectHash_event_10_message     0xB000000AL
#define MSG_PerfectHash_event_11_message     0xB000000BL
#define MSG_PerfectHash_event_0_message      0xB0010000L
#define MSG_PerfectHash_event_1_message      0xB0010001L
#define MSG_PerfectHash_event_2_message      0xB0010002L
